2025/06/25 18:24:38 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: win32
    Python: 3.10.18 | packaged by Anaconda, Inc. | (main, Jun  5 2025, 13:08:55) [MSC v.1929 64 bit (AMD64)]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 1164042849
    GPU 0: NVIDIA GeForce GTX 1660
    CUDA_HOME: C:\Users\Sagi\Miniconda3\envs\gcp-env\Library
    NVCC: Not Available
    MSVC: Оптимизирующий компилятор Microsoft (R) C/C++ версии 19.43.34810 для x64
    GCC: n/a
    PyTorch: 2.3.0
    PyTorch compiling details: PyTorch built with:
  - C++ Version: 201703
  - MSVC 192930151
  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v3.3.6 (Git Hash 86e6af5974177e513fd3fee58425e1063e7f1361)
  - OpenMP 2019
  - LAPACK is enabled (usually provided by MKL)
  - CPU capability usage: AVX2
  - CUDA Runtime 12.1
  - NVCC architecture flags: -gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_90,code=sm_90
  - CuDNN 8.8.1  (built against CUDA 12.0)
  - Magma 2.5.4
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=12.1, CUDNN_VERSION=8.8.1, CXX_COMPILER=C:/cb/pytorch_1000000000000/work/tmp_bin/sccache-cl.exe, CXX_FLAGS=/DWIN32 /D_WINDOWS /GR /EHsc /Zc:__cplusplus /bigobj /FS /utf-8 -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOCUPTI -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE /wd4624 /wd4068 /wd4067 /wd4267 /wd4661 /wd4717 /wd4244 /wd4804 /wd4273, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=2.3.0, USE_CUDA=ON, USE_CUDNN=ON, USE_CUSPARSELT=OFF, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_GLOO=ON, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=OFF, USE_NNPACK=OFF, USE_OPENMP=ON, USE_ROCM=OFF, USE_ROCM_KERNEL_ASSERT=OFF, 

    TorchVision: 0.18.0
    OpenCV: 4.11.0
    MMEngine: 0.10.7

Runtime environment:
    cudnn_benchmark: False
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 1164042849
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

2025/06/25 18:24:40 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=4, enable=True)
backend_args = None
batch_augments = [
    dict(
        img_pad_value=0,
        mask_pad_value=0,
        pad_mask=True,
        pad_seg=True,
        seg_pad_value=255,
        size=(
            512,
            512,
        ),
        type='BatchFixedSizePad'),
]
crop_size = (
    512,
    512,
)
data_preprocessor = dict(
    batch_augments=[
        dict(
            img_pad_value=0,
            mask_pad_value=0,
            pad_mask=True,
            pad_seg=True,
            seg_pad_value=255,
            size=(
                512,
                512,
            ),
            type='BatchFixedSizePad'),
    ],
    bgr_to_rgb=True,
    mask_pad_value=0,
    mean=[
        123.675,
        116.28,
        103.53,
    ],
    pad_mask=True,
    pad_seg=True,
    pad_size_divisor=32,
    seg_pad_value=255,
    std=[
        58.395,
        57.12,
        57.375,
    ],
    type='DetDataPreprocessor')
data_root = 'data/kostanai'
dataset_type = 'WHUMixVectorDataset'
default_hooks = dict(
    checkpoint=dict(
        by_epoch=True,
        interval=1,
        max_keep_ckpts=3,
        save_last=True,
        type='CheckpointHook'),
    logger=dict(interval=10, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(draw=True, interval=10, type='TanmlhVisualizationHook'))
default_scope = 'mmdet'
embed_multi = dict(decay_mult=0.0, lr_mult=1.0)
env_cfg = dict(
    cudnn_benchmark=False,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
img_norm_cfg = dict(
    mean=[
        123.675,
        116.28,
        103.53,
    ],
    std=[
        58.395,
        57.12,
        57.375,
    ],
    to_rgb=True)
launcher = 'none'
load_from = 'checkpoints/mask2former_r50_pretrained_50e_whu-mix-vector.pth'
log_config = dict(hooks=[
    dict(type='TextLoggerHook'),
    dict(
        init_kwargs=dict(
            allow_val_change=True,
            group='mask2former_training',
            name='mask2former_e1_lre-5_kostanai_afs_quicktest',
            project='building-segmentation-gcp',
            resume='never'),
        interval=10,
        log_checkpoint=True,
        log_checkpoint_metadata=True,
        num_eval_images=10,
        type='MMDetWandbHook'),
])
log_level = 'INFO'
log_processor = dict(by_epoch=True, type='LogProcessor', window_size=10)
max_epochs = 10
model = dict(
    backbone=dict(
        depth=50,
        frozen_stages=2,
        init_cfg=dict(checkpoint='torchvision://resnet50', type='Pretrained'),
        norm_cfg=dict(requires_grad=False, type='BN'),
        norm_eval=True,
        num_stages=4,
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        style='pytorch',
        type='ResNet'),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        mask_pad_value=0,
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_mask=True,
        pad_seg=True,
        pad_size_divisor=32,
        seg_pad_value=255,
        std=[
            58.395,
            57.12,
            57.375,
        ],
        type='DetDataPreprocessor'),
    init_cfg=None,
    panoptic_fusion_head=dict(
        init_cfg=None,
        loss_panoptic=None,
        num_stuff_classes=0,
        num_things_classes=1,
        type='MaskFormerFusionHead'),
    panoptic_head=dict(
        enforce_decoder_input_project=False,
        feat_channels=256,
        in_channels=[
            256,
            512,
            1024,
            2048,
        ],
        loss_cls=dict(
            class_weight=[
                1.0,
                0.1,
            ],
            loss_weight=2.0,
            reduction='mean',
            type='CrossEntropyLoss',
            use_sigmoid=False),
        loss_dice=dict(
            activate=True,
            eps=1.0,
            loss_weight=5.0,
            naive_dice=True,
            reduction='mean',
            type='DiceLoss',
            use_sigmoid=True),
        loss_mask=dict(
            loss_weight=5.0,
            reduction='mean',
            type='CrossEntropyLoss',
            use_sigmoid=True),
        num_queries=300,
        num_stuff_classes=0,
        num_things_classes=1,
        num_transformer_feat_level=3,
        out_channels=256,
        pixel_decoder=dict(
            act_cfg=dict(type='ReLU'),
            encoder=dict(
                layer_cfg=dict(
                    ffn_cfg=dict(
                        act_cfg=dict(inplace=True, type='ReLU'),
                        embed_dims=256,
                        feedforward_channels=1024,
                        ffn_drop=0.0,
                        num_fcs=2),
                    self_attn_cfg=dict(
                        batch_first=True,
                        dropout=0.0,
                        embed_dims=256,
                        num_heads=8,
                        num_levels=3,
                        num_points=4)),
                num_layers=6),
            norm_cfg=dict(num_groups=32, type='GN'),
            num_outs=3,
            positional_encoding=dict(normalize=True, num_feats=128),
            type='MSDeformAttnPixelDecoder'),
        positional_encoding=dict(normalize=True, num_feats=128),
        strides=[
            4,
            8,
            16,
            32,
        ],
        transformer_decoder=dict(
            init_cfg=None,
            layer_cfg=dict(
                cross_attn_cfg=dict(
                    batch_first=True, dropout=0.0, embed_dims=256,
                    num_heads=8),
                ffn_cfg=dict(
                    act_cfg=dict(inplace=True, type='ReLU'),
                    embed_dims=256,
                    feedforward_channels=2048,
                    ffn_drop=0.0,
                    num_fcs=2),
                self_attn_cfg=dict(
                    batch_first=True, dropout=0.0, embed_dims=256,
                    num_heads=8)),
            num_layers=9,
            return_intermediate=True),
        type='Mask2FormerHead'),
    test_cfg=dict(
        filter_low_score=False,
        instance_on=True,
        iou_thr=0.8,
        max_per_image=200,
        panoptic_on=False,
        semantic_on=False),
    train_cfg=dict(
        assigner=dict(
            match_costs=[
                dict(type='ClassificationCost', weight=2.0),
                dict(
                    type='CrossEntropyLossCost', use_sigmoid=True, weight=5.0),
                dict(eps=1.0, pred_act=True, type='DiceCost', weight=5.0),
            ],
            type='HungarianAssigner'),
        importance_sample_ratio=0.75,
        num_points=12544,
        oversample_ratio=3.0,
        sampler=dict(type='MaskPseudoSampler')),
    type='Mask2Former')
num_classes = 1
num_stuff_classes = 0
num_things_classes = 1
optim_wrapper = dict(
    clip_grad=dict(max_norm=0.01, norm_type=2),
    optimizer=dict(
        betas=(
            0.9,
            0.999,
        ),
        eps=1e-08,
        lr=1e-05,
        type='AdamW',
        weight_decay=0.05),
    paramwise_cfg=dict(
        custom_keys=dict(
            backbone=dict(decay_mult=1.0, lr_mult=0.01),
            level_embed=dict(decay_mult=0.0, lr_mult=1.0),
            query_embed=dict(decay_mult=0.0, lr_mult=1.0),
            query_feat=dict(decay_mult=0.0, lr_mult=1.0)),
        norm_decay_mult=0.0),
    type='OptimWrapper')
param_scheduler = [
    dict(
        begin=0, by_epoch=False, end=1000, start_factor=0.001,
        type='LinearLR'),
    dict(
        begin=0,
        by_epoch=True,
        end=10,
        gamma=0.1,
        milestones=[
            40,
        ],
        type='MultiStepLR'),
]
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=2,
    dataset=dict(
        ann_file='test/test.json',
        backend_args=None,
        data_prefix=dict(img='test/images'),
        data_root='data/kostanai',
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                512,
                512,
            ), type='Resize'),
            dict(
                poly2mask=False,
                type='LoadAnnotations',
                with_bbox=False,
                with_mask=True,
                with_poly_json=False),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                ),
                type='PackDetInputs'),
        ],
        test_mode=True,
        type='WHUMixVectorDataset'),
    drop_last=False,
    num_workers=2,
    persistent_workers=False,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = [
    dict(
        ann_file='data/kostanai/test/test.json',
        backend_args=None,
        metric=[
            'segm',
        ],
        type='CocoMetric'),
]
test_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        512,
        512,
    ), type='Resize'),
    dict(
        poly2mask=False,
        type='LoadAnnotations',
        with_bbox=False,
        with_mask=True,
        with_poly_json=False),
    dict(
        meta_keys=(
            'img_id',
            'img_path',
            'ori_shape',
            'img_shape',
            'scale_factor',
        ),
        type='PackDetInputs'),
]
train_cfg = dict(max_epochs=10, type='EpochBasedTrainLoop', val_interval=1)
train_dataloader = dict(
    batch_sampler=dict(type='AspectRatioBatchSampler'),
    batch_size=4,
    dataset=dict(
        ann_file='train/train.json',
        backend_args=None,
        data_prefix=dict(img='train/images'),
        data_root='data/kostanai',
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(
                poly2mask=False,
                type='LoadAnnotations',
                with_bbox=True,
                with_mask=True,
                with_poly_json=False),
            dict(keep_ratio=True, scale=(
                512,
                512,
            ), type='Resize'),
            dict(
                direction=[
                    'horizontal',
                    'vertical',
                    'diagonal',
                ],
                prob=0.75,
                type='RandomFlip'),
            dict(prob=0.75, type='Rotate90'),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                ),
                type='PackDetInputs'),
        ],
        type='WHUMixVectorDataset'),
    num_workers=2,
    persistent_workers=False,
    sampler=dict(shuffle=True, type='DefaultSampler'))
train_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        poly2mask=False,
        type='LoadAnnotations',
        with_bbox=True,
        with_mask=True,
        with_poly_json=False),
    dict(keep_ratio=True, scale=(
        512,
        512,
    ), type='Resize'),
    dict(
        direction=[
            'horizontal',
            'vertical',
            'diagonal',
        ],
        prob=0.75,
        type='RandomFlip'),
    dict(prob=0.75, type='Rotate90'),
    dict(
        meta_keys=(
            'img_id',
            'img_path',
            'ori_shape',
            'img_shape',
            'scale_factor',
        ),
        type='PackDetInputs'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=2,
    dataset=dict(
        ann_file='val/val.json',
        backend_args=None,
        data_prefix=dict(img='val/images'),
        data_root='data/kostanai',
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                512,
                512,
            ), type='Resize'),
            dict(
                poly2mask=False,
                type='LoadAnnotations',
                with_bbox=False,
                with_mask=True,
                with_poly_json=False),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                ),
                type='PackDetInputs'),
        ],
        test_mode=True,
        type='WHUMixVectorDataset'),
    drop_last=False,
    num_workers=2,
    persistent_workers=False,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = [
    dict(
        ann_file='data/kostanai/val/val.json',
        backend_args=None,
        metric=[
            'segm',
        ],
        type='CocoMetric'),
]
vis_backends = [
    dict(
        init_kwargs=dict(
            allow_val_change=True,
            group='mask2former_training',
            name='mask2former_e1_lre-5_kostanai_afs_quicktest',
            project='building-segmentation-gcp',
            resume='never'),
        save_dir=
        'work_dir\\mask2former_training\\mask2former_e1_lre-5_kostanai_afs_quicktest\\wandb',
        type='WandbVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='TanmlhVisualizer',
    vis_backends=[
        dict(
            init_kwargs=dict(
                allow_val_change=True,
                group='mask2former_training',
                name='mask2former_e1_lre-5_kostanai_afs_quicktest',
                project='building-segmentation-gcp',
                resume='never'),
            save_dir=
            'work_dir\\mask2former_training\\mask2former_e1_lre-5_kostanai_afs_quicktest\\wandb',
            type='WandbVisBackend'),
    ])
work_dir = 'work_dir\\mask2former_training\\mask2former_e1_lre-5_kostanai_afs_quicktest'

2025/06/25 18:25:10 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
2025/06/25 18:25:10 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) TanmlhVisualizationHook            
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) TanmlhVisualizationHook            
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
2025/06/25 18:25:14 - mmengine - WARNING - backbone.conv1.weight is skipped since its requires_grad=False
2025/06/25 18:25:14 - mmengine - WARNING - backbone.bn1.weight is skipped since its requires_grad=False
2025/06/25 18:25:14 - mmengine - WARNING - backbone.bn1.bias is skipped since its requires_grad=False
2025/06/25 18:25:14 - mmengine - WARNING - backbone.layer1.0.conv1.weight is skipped since its requires_grad=False
2025/06/25 18:25:14 - mmengine - WARNING - backbone.layer1.0.bn1.weight is skipped since its requires_grad=False
2025/06/25 18:25:14 - mmengine - WARNING - backbone.layer1.0.bn1.bias is skipped since its requires_grad=False
2025/06/25 18:25:14 - mmengine - WARNING - backbone.layer1.0.conv2.weight is skipped since its requires_grad=False
2025/06/25 18:25:14 - mmengine - WARNING - backbone.layer1.0.bn2.weight is skipped since its requires_grad=False
2025/06/25 18:25:14 - mmengine - WARNING - backbone.layer1.0.bn2.bias is skipped since its requires_grad=False
2025/06/25 18:25:14 - mmengine - WARNING - backbone.layer1.0.conv3.weight is skipped since its requires_grad=False
2025/06/25 18:25:14 - mmengine - WARNING - backbone.layer1.0.bn3.weight is skipped since its requires_grad=False
2025/06/25 18:25:14 - mmengine - WARNING - backbone.layer1.0.bn3.bias is skipped since its requires_grad=False
2025/06/25 18:25:14 - mmengine - WARNING - backbone.layer1.0.downsample.0.weight is skipped since its requires_grad=False
2025/06/25 18:25:14 - mmengine - WARNING - backbone.layer1.0.downsample.1.weight is skipped since its requires_grad=False
2025/06/25 18:25:14 - mmengine - WARNING - backbone.layer1.0.downsample.1.bias is skipped since its requires_grad=False
2025/06/25 18:25:14 - mmengine - WARNING - backbone.layer1.1.conv1.weight is skipped since its requires_grad=False
2025/06/25 18:25:14 - mmengine - WARNING - backbone.layer1.1.bn1.weight is skipped since its requires_grad=False
2025/06/25 18:25:14 - mmengine - WARNING - backbone.layer1.1.bn1.bias is skipped since its requires_grad=False
2025/06/25 18:25:14 - mmengine - WARNING - backbone.layer1.1.conv2.weight is skipped since its requires_grad=False
2025/06/25 18:25:14 - mmengine - WARNING - backbone.layer1.1.bn2.weight is skipped since its requires_grad=False
2025/06/25 18:25:14 - mmengine - WARNING - backbone.layer1.1.bn2.bias is skipped since its requires_grad=False
2025/06/25 18:25:14 - mmengine - WARNING - backbone.layer1.1.conv3.weight is skipped since its requires_grad=False
2025/06/25 18:25:14 - mmengine - WARNING - backbone.layer1.1.bn3.weight is skipped since its requires_grad=False
2025/06/25 18:25:14 - mmengine - WARNING - backbone.layer1.1.bn3.bias is skipped since its requires_grad=False
2025/06/25 18:25:14 - mmengine - WARNING - backbone.layer1.2.conv1.weight is skipped since its requires_grad=False
2025/06/25 18:25:14 - mmengine - WARNING - backbone.layer1.2.bn1.weight is skipped since its requires_grad=False
2025/06/25 18:25:14 - mmengine - WARNING - backbone.layer1.2.bn1.bias is skipped since its requires_grad=False
2025/06/25 18:25:14 - mmengine - WARNING - backbone.layer1.2.conv2.weight is skipped since its requires_grad=False
2025/06/25 18:25:14 - mmengine - WARNING - backbone.layer1.2.bn2.weight is skipped since its requires_grad=False
2025/06/25 18:25:14 - mmengine - WARNING - backbone.layer1.2.bn2.bias is skipped since its requires_grad=False
2025/06/25 18:25:14 - mmengine - WARNING - backbone.layer1.2.conv3.weight is skipped since its requires_grad=False
2025/06/25 18:25:14 - mmengine - WARNING - backbone.layer1.2.bn3.weight is skipped since its requires_grad=False
2025/06/25 18:25:14 - mmengine - WARNING - backbone.layer1.2.bn3.bias is skipped since its requires_grad=False
2025/06/25 18:25:14 - mmengine - WARNING - backbone.layer2.0.conv1.weight is skipped since its requires_grad=False
2025/06/25 18:25:14 - mmengine - WARNING - backbone.layer2.0.bn1.weight is skipped since its requires_grad=False
2025/06/25 18:25:14 - mmengine - WARNING - backbone.layer2.0.bn1.bias is skipped since its requires_grad=False
2025/06/25 18:25:14 - mmengine - WARNING - backbone.layer2.0.conv2.weight is skipped since its requires_grad=False
2025/06/25 18:25:14 - mmengine - WARNING - backbone.layer2.0.bn2.weight is skipped since its requires_grad=False
2025/06/25 18:25:14 - mmengine - WARNING - backbone.layer2.0.bn2.bias is skipped since its requires_grad=False
2025/06/25 18:25:14 - mmengine - WARNING - backbone.layer2.0.conv3.weight is skipped since its requires_grad=False
2025/06/25 18:25:14 - mmengine - WARNING - backbone.layer2.0.bn3.weight is skipped since its requires_grad=False
2025/06/25 18:25:14 - mmengine - WARNING - backbone.layer2.0.bn3.bias is skipped since its requires_grad=False
2025/06/25 18:25:14 - mmengine - WARNING - backbone.layer2.0.downsample.0.weight is skipped since its requires_grad=False
2025/06/25 18:25:14 - mmengine - WARNING - backbone.layer2.0.downsample.1.weight is skipped since its requires_grad=False
2025/06/25 18:25:14 - mmengine - WARNING - backbone.layer2.0.downsample.1.bias is skipped since its requires_grad=False
2025/06/25 18:25:14 - mmengine - WARNING - backbone.layer2.1.conv1.weight is skipped since its requires_grad=False
2025/06/25 18:25:14 - mmengine - WARNING - backbone.layer2.1.bn1.weight is skipped since its requires_grad=False
2025/06/25 18:25:14 - mmengine - WARNING - backbone.layer2.1.bn1.bias is skipped since its requires_grad=False
2025/06/25 18:25:14 - mmengine - WARNING - backbone.layer2.1.conv2.weight is skipped since its requires_grad=False
2025/06/25 18:25:14 - mmengine - WARNING - backbone.layer2.1.bn2.weight is skipped since its requires_grad=False
2025/06/25 18:25:14 - mmengine - WARNING - backbone.layer2.1.bn2.bias is skipped since its requires_grad=False
2025/06/25 18:25:14 - mmengine - WARNING - backbone.layer2.1.conv3.weight is skipped since its requires_grad=False
2025/06/25 18:25:14 - mmengine - WARNING - backbone.layer2.1.bn3.weight is skipped since its requires_grad=False
2025/06/25 18:25:14 - mmengine - WARNING - backbone.layer2.1.bn3.bias is skipped since its requires_grad=False
2025/06/25 18:25:14 - mmengine - WARNING - backbone.layer2.2.conv1.weight is skipped since its requires_grad=False
2025/06/25 18:25:14 - mmengine - WARNING - backbone.layer2.2.bn1.weight is skipped since its requires_grad=False
2025/06/25 18:25:14 - mmengine - WARNING - backbone.layer2.2.bn1.bias is skipped since its requires_grad=False
2025/06/25 18:25:14 - mmengine - WARNING - backbone.layer2.2.conv2.weight is skipped since its requires_grad=False
2025/06/25 18:25:14 - mmengine - WARNING - backbone.layer2.2.bn2.weight is skipped since its requires_grad=False
2025/06/25 18:25:14 - mmengine - WARNING - backbone.layer2.2.bn2.bias is skipped since its requires_grad=False
2025/06/25 18:25:14 - mmengine - WARNING - backbone.layer2.2.conv3.weight is skipped since its requires_grad=False
2025/06/25 18:25:14 - mmengine - WARNING - backbone.layer2.2.bn3.weight is skipped since its requires_grad=False
2025/06/25 18:25:14 - mmengine - WARNING - backbone.layer2.2.bn3.bias is skipped since its requires_grad=False
2025/06/25 18:25:14 - mmengine - WARNING - backbone.layer2.3.conv1.weight is skipped since its requires_grad=False
2025/06/25 18:25:14 - mmengine - WARNING - backbone.layer2.3.bn1.weight is skipped since its requires_grad=False
2025/06/25 18:25:14 - mmengine - WARNING - backbone.layer2.3.bn1.bias is skipped since its requires_grad=False
2025/06/25 18:25:14 - mmengine - WARNING - backbone.layer2.3.conv2.weight is skipped since its requires_grad=False
2025/06/25 18:25:14 - mmengine - WARNING - backbone.layer2.3.bn2.weight is skipped since its requires_grad=False
2025/06/25 18:25:14 - mmengine - WARNING - backbone.layer2.3.bn2.bias is skipped since its requires_grad=False
2025/06/25 18:25:14 - mmengine - WARNING - backbone.layer2.3.conv3.weight is skipped since its requires_grad=False
2025/06/25 18:25:14 - mmengine - WARNING - backbone.layer2.3.bn3.weight is skipped since its requires_grad=False
2025/06/25 18:25:14 - mmengine - WARNING - backbone.layer2.3.bn3.bias is skipped since its requires_grad=False
2025/06/25 18:25:14 - mmengine - INFO - paramwise_options -- backbone.layer3.0.conv1.weight:lr=1.0000000000000001e-07
2025/06/25 18:25:14 - mmengine - INFO - paramwise_options -- backbone.layer3.0.conv1.weight:weight_decay=0.05
2025/06/25 18:25:14 - mmengine - INFO - paramwise_options -- backbone.layer3.0.conv1.weight:lr_mult=0.01
2025/06/25 18:25:14 - mmengine - INFO - paramwise_options -- backbone.layer3.0.conv1.weight:decay_mult=1.0
2025/06/25 18:25:14 - mmengine - WARNING - backbone.layer3.0.bn1.weight is skipped since its requires_grad=False
2025/06/25 18:25:14 - mmengine - WARNING - backbone.layer3.0.bn1.bias is skipped since its requires_grad=False
2025/06/25 18:25:14 - mmengine - INFO - paramwise_options -- backbone.layer3.0.conv2.weight:lr=1.0000000000000001e-07
2025/06/25 18:25:14 - mmengine - INFO - paramwise_options -- backbone.layer3.0.conv2.weight:weight_decay=0.05
2025/06/25 18:25:14 - mmengine - INFO - paramwise_options -- backbone.layer3.0.conv2.weight:lr_mult=0.01
2025/06/25 18:25:14 - mmengine - INFO - paramwise_options -- backbone.layer3.0.conv2.weight:decay_mult=1.0
2025/06/25 18:25:14 - mmengine - WARNING - backbone.layer3.0.bn2.weight is skipped since its requires_grad=False
2025/06/25 18:25:14 - mmengine - WARNING - backbone.layer3.0.bn2.bias is skipped since its requires_grad=False
2025/06/25 18:25:14 - mmengine - INFO - paramwise_options -- backbone.layer3.0.conv3.weight:lr=1.0000000000000001e-07
2025/06/25 18:25:14 - mmengine - INFO - paramwise_options -- backbone.layer3.0.conv3.weight:weight_decay=0.05
2025/06/25 18:25:14 - mmengine - INFO - paramwise_options -- backbone.layer3.0.conv3.weight:lr_mult=0.01
2025/06/25 18:25:14 - mmengine - INFO - paramwise_options -- backbone.layer3.0.conv3.weight:decay_mult=1.0
2025/06/25 18:25:14 - mmengine - WARNING - backbone.layer3.0.bn3.weight is skipped since its requires_grad=False
2025/06/25 18:25:14 - mmengine - WARNING - backbone.layer3.0.bn3.bias is skipped since its requires_grad=False
2025/06/25 18:25:14 - mmengine - INFO - paramwise_options -- backbone.layer3.0.downsample.0.weight:lr=1.0000000000000001e-07
2025/06/25 18:25:14 - mmengine - INFO - paramwise_options -- backbone.layer3.0.downsample.0.weight:weight_decay=0.05
2025/06/25 18:25:14 - mmengine - INFO - paramwise_options -- backbone.layer3.0.downsample.0.weight:lr_mult=0.01
2025/06/25 18:25:14 - mmengine - INFO - paramwise_options -- backbone.layer3.0.downsample.0.weight:decay_mult=1.0
2025/06/25 18:25:14 - mmengine - WARNING - backbone.layer3.0.downsample.1.weight is skipped since its requires_grad=False
2025/06/25 18:25:14 - mmengine - WARNING - backbone.layer3.0.downsample.1.bias is skipped since its requires_grad=False
2025/06/25 18:25:14 - mmengine - INFO - paramwise_options -- backbone.layer3.1.conv1.weight:lr=1.0000000000000001e-07
2025/06/25 18:25:14 - mmengine - INFO - paramwise_options -- backbone.layer3.1.conv1.weight:weight_decay=0.05
2025/06/25 18:25:14 - mmengine - INFO - paramwise_options -- backbone.layer3.1.conv1.weight:lr_mult=0.01
2025/06/25 18:25:14 - mmengine - INFO - paramwise_options -- backbone.layer3.1.conv1.weight:decay_mult=1.0
2025/06/25 18:25:14 - mmengine - WARNING - backbone.layer3.1.bn1.weight is skipped since its requires_grad=False
2025/06/25 18:25:14 - mmengine - WARNING - backbone.layer3.1.bn1.bias is skipped since its requires_grad=False
2025/06/25 18:25:14 - mmengine - INFO - paramwise_options -- backbone.layer3.1.conv2.weight:lr=1.0000000000000001e-07
2025/06/25 18:25:14 - mmengine - INFO - paramwise_options -- backbone.layer3.1.conv2.weight:weight_decay=0.05
2025/06/25 18:25:14 - mmengine - INFO - paramwise_options -- backbone.layer3.1.conv2.weight:lr_mult=0.01
2025/06/25 18:25:14 - mmengine - INFO - paramwise_options -- backbone.layer3.1.conv2.weight:decay_mult=1.0
2025/06/25 18:25:14 - mmengine - WARNING - backbone.layer3.1.bn2.weight is skipped since its requires_grad=False
2025/06/25 18:25:14 - mmengine - WARNING - backbone.layer3.1.bn2.bias is skipped since its requires_grad=False
2025/06/25 18:25:14 - mmengine - INFO - paramwise_options -- backbone.layer3.1.conv3.weight:lr=1.0000000000000001e-07
2025/06/25 18:25:14 - mmengine - INFO - paramwise_options -- backbone.layer3.1.conv3.weight:weight_decay=0.05
2025/06/25 18:25:14 - mmengine - INFO - paramwise_options -- backbone.layer3.1.conv3.weight:lr_mult=0.01
2025/06/25 18:25:14 - mmengine - INFO - paramwise_options -- backbone.layer3.1.conv3.weight:decay_mult=1.0
2025/06/25 18:25:14 - mmengine - WARNING - backbone.layer3.1.bn3.weight is skipped since its requires_grad=False
2025/06/25 18:25:14 - mmengine - WARNING - backbone.layer3.1.bn3.bias is skipped since its requires_grad=False
2025/06/25 18:25:14 - mmengine - INFO - paramwise_options -- backbone.layer3.2.conv1.weight:lr=1.0000000000000001e-07
2025/06/25 18:25:14 - mmengine - INFO - paramwise_options -- backbone.layer3.2.conv1.weight:weight_decay=0.05
2025/06/25 18:25:14 - mmengine - INFO - paramwise_options -- backbone.layer3.2.conv1.weight:lr_mult=0.01
2025/06/25 18:25:14 - mmengine - INFO - paramwise_options -- backbone.layer3.2.conv1.weight:decay_mult=1.0
2025/06/25 18:25:14 - mmengine - WARNING - backbone.layer3.2.bn1.weight is skipped since its requires_grad=False
2025/06/25 18:25:14 - mmengine - WARNING - backbone.layer3.2.bn1.bias is skipped since its requires_grad=False
2025/06/25 18:25:14 - mmengine - INFO - paramwise_options -- backbone.layer3.2.conv2.weight:lr=1.0000000000000001e-07
2025/06/25 18:25:14 - mmengine - INFO - paramwise_options -- backbone.layer3.2.conv2.weight:weight_decay=0.05
2025/06/25 18:25:14 - mmengine - INFO - paramwise_options -- backbone.layer3.2.conv2.weight:lr_mult=0.01
2025/06/25 18:25:14 - mmengine - INFO - paramwise_options -- backbone.layer3.2.conv2.weight:decay_mult=1.0
2025/06/25 18:25:14 - mmengine - WARNING - backbone.layer3.2.bn2.weight is skipped since its requires_grad=False
2025/06/25 18:25:14 - mmengine - WARNING - backbone.layer3.2.bn2.bias is skipped since its requires_grad=False
2025/06/25 18:25:14 - mmengine - INFO - paramwise_options -- backbone.layer3.2.conv3.weight:lr=1.0000000000000001e-07
2025/06/25 18:25:14 - mmengine - INFO - paramwise_options -- backbone.layer3.2.conv3.weight:weight_decay=0.05
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- backbone.layer3.2.conv3.weight:lr_mult=0.01
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- backbone.layer3.2.conv3.weight:decay_mult=1.0
2025/06/25 18:25:15 - mmengine - WARNING - backbone.layer3.2.bn3.weight is skipped since its requires_grad=False
2025/06/25 18:25:15 - mmengine - WARNING - backbone.layer3.2.bn3.bias is skipped since its requires_grad=False
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- backbone.layer3.3.conv1.weight:lr=1.0000000000000001e-07
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- backbone.layer3.3.conv1.weight:weight_decay=0.05
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- backbone.layer3.3.conv1.weight:lr_mult=0.01
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- backbone.layer3.3.conv1.weight:decay_mult=1.0
2025/06/25 18:25:15 - mmengine - WARNING - backbone.layer3.3.bn1.weight is skipped since its requires_grad=False
2025/06/25 18:25:15 - mmengine - WARNING - backbone.layer3.3.bn1.bias is skipped since its requires_grad=False
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- backbone.layer3.3.conv2.weight:lr=1.0000000000000001e-07
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- backbone.layer3.3.conv2.weight:weight_decay=0.05
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- backbone.layer3.3.conv2.weight:lr_mult=0.01
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- backbone.layer3.3.conv2.weight:decay_mult=1.0
2025/06/25 18:25:15 - mmengine - WARNING - backbone.layer3.3.bn2.weight is skipped since its requires_grad=False
2025/06/25 18:25:15 - mmengine - WARNING - backbone.layer3.3.bn2.bias is skipped since its requires_grad=False
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- backbone.layer3.3.conv3.weight:lr=1.0000000000000001e-07
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- backbone.layer3.3.conv3.weight:weight_decay=0.05
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- backbone.layer3.3.conv3.weight:lr_mult=0.01
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- backbone.layer3.3.conv3.weight:decay_mult=1.0
2025/06/25 18:25:15 - mmengine - WARNING - backbone.layer3.3.bn3.weight is skipped since its requires_grad=False
2025/06/25 18:25:15 - mmengine - WARNING - backbone.layer3.3.bn3.bias is skipped since its requires_grad=False
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- backbone.layer3.4.conv1.weight:lr=1.0000000000000001e-07
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- backbone.layer3.4.conv1.weight:weight_decay=0.05
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- backbone.layer3.4.conv1.weight:lr_mult=0.01
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- backbone.layer3.4.conv1.weight:decay_mult=1.0
2025/06/25 18:25:15 - mmengine - WARNING - backbone.layer3.4.bn1.weight is skipped since its requires_grad=False
2025/06/25 18:25:15 - mmengine - WARNING - backbone.layer3.4.bn1.bias is skipped since its requires_grad=False
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- backbone.layer3.4.conv2.weight:lr=1.0000000000000001e-07
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- backbone.layer3.4.conv2.weight:weight_decay=0.05
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- backbone.layer3.4.conv2.weight:lr_mult=0.01
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- backbone.layer3.4.conv2.weight:decay_mult=1.0
2025/06/25 18:25:15 - mmengine - WARNING - backbone.layer3.4.bn2.weight is skipped since its requires_grad=False
2025/06/25 18:25:15 - mmengine - WARNING - backbone.layer3.4.bn2.bias is skipped since its requires_grad=False
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- backbone.layer3.4.conv3.weight:lr=1.0000000000000001e-07
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- backbone.layer3.4.conv3.weight:weight_decay=0.05
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- backbone.layer3.4.conv3.weight:lr_mult=0.01
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- backbone.layer3.4.conv3.weight:decay_mult=1.0
2025/06/25 18:25:15 - mmengine - WARNING - backbone.layer3.4.bn3.weight is skipped since its requires_grad=False
2025/06/25 18:25:15 - mmengine - WARNING - backbone.layer3.4.bn3.bias is skipped since its requires_grad=False
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- backbone.layer3.5.conv1.weight:lr=1.0000000000000001e-07
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- backbone.layer3.5.conv1.weight:weight_decay=0.05
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- backbone.layer3.5.conv1.weight:lr_mult=0.01
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- backbone.layer3.5.conv1.weight:decay_mult=1.0
2025/06/25 18:25:15 - mmengine - WARNING - backbone.layer3.5.bn1.weight is skipped since its requires_grad=False
2025/06/25 18:25:15 - mmengine - WARNING - backbone.layer3.5.bn1.bias is skipped since its requires_grad=False
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- backbone.layer3.5.conv2.weight:lr=1.0000000000000001e-07
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- backbone.layer3.5.conv2.weight:weight_decay=0.05
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- backbone.layer3.5.conv2.weight:lr_mult=0.01
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- backbone.layer3.5.conv2.weight:decay_mult=1.0
2025/06/25 18:25:15 - mmengine - WARNING - backbone.layer3.5.bn2.weight is skipped since its requires_grad=False
2025/06/25 18:25:15 - mmengine - WARNING - backbone.layer3.5.bn2.bias is skipped since its requires_grad=False
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- backbone.layer3.5.conv3.weight:lr=1.0000000000000001e-07
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- backbone.layer3.5.conv3.weight:weight_decay=0.05
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- backbone.layer3.5.conv3.weight:lr_mult=0.01
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- backbone.layer3.5.conv3.weight:decay_mult=1.0
2025/06/25 18:25:15 - mmengine - WARNING - backbone.layer3.5.bn3.weight is skipped since its requires_grad=False
2025/06/25 18:25:15 - mmengine - WARNING - backbone.layer3.5.bn3.bias is skipped since its requires_grad=False
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- backbone.layer4.0.conv1.weight:lr=1.0000000000000001e-07
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- backbone.layer4.0.conv1.weight:weight_decay=0.05
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- backbone.layer4.0.conv1.weight:lr_mult=0.01
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- backbone.layer4.0.conv1.weight:decay_mult=1.0
2025/06/25 18:25:15 - mmengine - WARNING - backbone.layer4.0.bn1.weight is skipped since its requires_grad=False
2025/06/25 18:25:15 - mmengine - WARNING - backbone.layer4.0.bn1.bias is skipped since its requires_grad=False
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- backbone.layer4.0.conv2.weight:lr=1.0000000000000001e-07
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- backbone.layer4.0.conv2.weight:weight_decay=0.05
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- backbone.layer4.0.conv2.weight:lr_mult=0.01
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- backbone.layer4.0.conv2.weight:decay_mult=1.0
2025/06/25 18:25:15 - mmengine - WARNING - backbone.layer4.0.bn2.weight is skipped since its requires_grad=False
2025/06/25 18:25:15 - mmengine - WARNING - backbone.layer4.0.bn2.bias is skipped since its requires_grad=False
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- backbone.layer4.0.conv3.weight:lr=1.0000000000000001e-07
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- backbone.layer4.0.conv3.weight:weight_decay=0.05
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- backbone.layer4.0.conv3.weight:lr_mult=0.01
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- backbone.layer4.0.conv3.weight:decay_mult=1.0
2025/06/25 18:25:15 - mmengine - WARNING - backbone.layer4.0.bn3.weight is skipped since its requires_grad=False
2025/06/25 18:25:15 - mmengine - WARNING - backbone.layer4.0.bn3.bias is skipped since its requires_grad=False
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- backbone.layer4.0.downsample.0.weight:lr=1.0000000000000001e-07
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- backbone.layer4.0.downsample.0.weight:weight_decay=0.05
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- backbone.layer4.0.downsample.0.weight:lr_mult=0.01
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- backbone.layer4.0.downsample.0.weight:decay_mult=1.0
2025/06/25 18:25:15 - mmengine - WARNING - backbone.layer4.0.downsample.1.weight is skipped since its requires_grad=False
2025/06/25 18:25:15 - mmengine - WARNING - backbone.layer4.0.downsample.1.bias is skipped since its requires_grad=False
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- backbone.layer4.1.conv1.weight:lr=1.0000000000000001e-07
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- backbone.layer4.1.conv1.weight:weight_decay=0.05
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- backbone.layer4.1.conv1.weight:lr_mult=0.01
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- backbone.layer4.1.conv1.weight:decay_mult=1.0
2025/06/25 18:25:15 - mmengine - WARNING - backbone.layer4.1.bn1.weight is skipped since its requires_grad=False
2025/06/25 18:25:15 - mmengine - WARNING - backbone.layer4.1.bn1.bias is skipped since its requires_grad=False
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- backbone.layer4.1.conv2.weight:lr=1.0000000000000001e-07
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- backbone.layer4.1.conv2.weight:weight_decay=0.05
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- backbone.layer4.1.conv2.weight:lr_mult=0.01
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- backbone.layer4.1.conv2.weight:decay_mult=1.0
2025/06/25 18:25:15 - mmengine - WARNING - backbone.layer4.1.bn2.weight is skipped since its requires_grad=False
2025/06/25 18:25:15 - mmengine - WARNING - backbone.layer4.1.bn2.bias is skipped since its requires_grad=False
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- backbone.layer4.1.conv3.weight:lr=1.0000000000000001e-07
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- backbone.layer4.1.conv3.weight:weight_decay=0.05
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- backbone.layer4.1.conv3.weight:lr_mult=0.01
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- backbone.layer4.1.conv3.weight:decay_mult=1.0
2025/06/25 18:25:15 - mmengine - WARNING - backbone.layer4.1.bn3.weight is skipped since its requires_grad=False
2025/06/25 18:25:15 - mmengine - WARNING - backbone.layer4.1.bn3.bias is skipped since its requires_grad=False
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- backbone.layer4.2.conv1.weight:lr=1.0000000000000001e-07
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- backbone.layer4.2.conv1.weight:weight_decay=0.05
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- backbone.layer4.2.conv1.weight:lr_mult=0.01
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- backbone.layer4.2.conv1.weight:decay_mult=1.0
2025/06/25 18:25:15 - mmengine - WARNING - backbone.layer4.2.bn1.weight is skipped since its requires_grad=False
2025/06/25 18:25:15 - mmengine - WARNING - backbone.layer4.2.bn1.bias is skipped since its requires_grad=False
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- backbone.layer4.2.conv2.weight:lr=1.0000000000000001e-07
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- backbone.layer4.2.conv2.weight:weight_decay=0.05
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- backbone.layer4.2.conv2.weight:lr_mult=0.01
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- backbone.layer4.2.conv2.weight:decay_mult=1.0
2025/06/25 18:25:15 - mmengine - WARNING - backbone.layer4.2.bn2.weight is skipped since its requires_grad=False
2025/06/25 18:25:15 - mmengine - WARNING - backbone.layer4.2.bn2.bias is skipped since its requires_grad=False
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- backbone.layer4.2.conv3.weight:lr=1.0000000000000001e-07
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- backbone.layer4.2.conv3.weight:weight_decay=0.05
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- backbone.layer4.2.conv3.weight:lr_mult=0.01
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- backbone.layer4.2.conv3.weight:decay_mult=1.0
2025/06/25 18:25:15 - mmengine - WARNING - backbone.layer4.2.bn3.weight is skipped since its requires_grad=False
2025/06/25 18:25:15 - mmengine - WARNING - backbone.layer4.2.bn3.bias is skipped since its requires_grad=False
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- panoptic_head.pixel_decoder.input_convs.0.gn.weight:weight_decay=0.0
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- panoptic_head.pixel_decoder.input_convs.0.gn.bias:weight_decay=0.0
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- panoptic_head.pixel_decoder.input_convs.1.gn.weight:weight_decay=0.0
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- panoptic_head.pixel_decoder.input_convs.1.gn.bias:weight_decay=0.0
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- panoptic_head.pixel_decoder.input_convs.2.gn.weight:weight_decay=0.0
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- panoptic_head.pixel_decoder.input_convs.2.gn.bias:weight_decay=0.0
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- panoptic_head.pixel_decoder.encoder.layers.0.norms.0.weight:weight_decay=0.0
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- panoptic_head.pixel_decoder.encoder.layers.0.norms.0.bias:weight_decay=0.0
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- panoptic_head.pixel_decoder.encoder.layers.0.norms.1.weight:weight_decay=0.0
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- panoptic_head.pixel_decoder.encoder.layers.0.norms.1.bias:weight_decay=0.0
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- panoptic_head.pixel_decoder.encoder.layers.1.norms.0.weight:weight_decay=0.0
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- panoptic_head.pixel_decoder.encoder.layers.1.norms.0.bias:weight_decay=0.0
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- panoptic_head.pixel_decoder.encoder.layers.1.norms.1.weight:weight_decay=0.0
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- panoptic_head.pixel_decoder.encoder.layers.1.norms.1.bias:weight_decay=0.0
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- panoptic_head.pixel_decoder.encoder.layers.2.norms.0.weight:weight_decay=0.0
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- panoptic_head.pixel_decoder.encoder.layers.2.norms.0.bias:weight_decay=0.0
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- panoptic_head.pixel_decoder.encoder.layers.2.norms.1.weight:weight_decay=0.0
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- panoptic_head.pixel_decoder.encoder.layers.2.norms.1.bias:weight_decay=0.0
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- panoptic_head.pixel_decoder.encoder.layers.3.norms.0.weight:weight_decay=0.0
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- panoptic_head.pixel_decoder.encoder.layers.3.norms.0.bias:weight_decay=0.0
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- panoptic_head.pixel_decoder.encoder.layers.3.norms.1.weight:weight_decay=0.0
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- panoptic_head.pixel_decoder.encoder.layers.3.norms.1.bias:weight_decay=0.0
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- panoptic_head.pixel_decoder.encoder.layers.4.norms.0.weight:weight_decay=0.0
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- panoptic_head.pixel_decoder.encoder.layers.4.norms.0.bias:weight_decay=0.0
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- panoptic_head.pixel_decoder.encoder.layers.4.norms.1.weight:weight_decay=0.0
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- panoptic_head.pixel_decoder.encoder.layers.4.norms.1.bias:weight_decay=0.0
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- panoptic_head.pixel_decoder.encoder.layers.5.norms.0.weight:weight_decay=0.0
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- panoptic_head.pixel_decoder.encoder.layers.5.norms.0.bias:weight_decay=0.0
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- panoptic_head.pixel_decoder.encoder.layers.5.norms.1.weight:weight_decay=0.0
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- panoptic_head.pixel_decoder.encoder.layers.5.norms.1.bias:weight_decay=0.0
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- panoptic_head.pixel_decoder.lateral_convs.0.gn.weight:weight_decay=0.0
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- panoptic_head.pixel_decoder.lateral_convs.0.gn.bias:weight_decay=0.0
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- panoptic_head.pixel_decoder.output_convs.0.gn.weight:weight_decay=0.0
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- panoptic_head.pixel_decoder.output_convs.0.gn.bias:weight_decay=0.0
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- panoptic_head.transformer_decoder.layers.0.norms.0.weight:weight_decay=0.0
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- panoptic_head.transformer_decoder.layers.0.norms.0.bias:weight_decay=0.0
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- panoptic_head.transformer_decoder.layers.0.norms.1.weight:weight_decay=0.0
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- panoptic_head.transformer_decoder.layers.0.norms.1.bias:weight_decay=0.0
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- panoptic_head.transformer_decoder.layers.0.norms.2.weight:weight_decay=0.0
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- panoptic_head.transformer_decoder.layers.0.norms.2.bias:weight_decay=0.0
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- panoptic_head.transformer_decoder.layers.1.norms.0.weight:weight_decay=0.0
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- panoptic_head.transformer_decoder.layers.1.norms.0.bias:weight_decay=0.0
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- panoptic_head.transformer_decoder.layers.1.norms.1.weight:weight_decay=0.0
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- panoptic_head.transformer_decoder.layers.1.norms.1.bias:weight_decay=0.0
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- panoptic_head.transformer_decoder.layers.1.norms.2.weight:weight_decay=0.0
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- panoptic_head.transformer_decoder.layers.1.norms.2.bias:weight_decay=0.0
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- panoptic_head.transformer_decoder.layers.2.norms.0.weight:weight_decay=0.0
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- panoptic_head.transformer_decoder.layers.2.norms.0.bias:weight_decay=0.0
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- panoptic_head.transformer_decoder.layers.2.norms.1.weight:weight_decay=0.0
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- panoptic_head.transformer_decoder.layers.2.norms.1.bias:weight_decay=0.0
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- panoptic_head.transformer_decoder.layers.2.norms.2.weight:weight_decay=0.0
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- panoptic_head.transformer_decoder.layers.2.norms.2.bias:weight_decay=0.0
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- panoptic_head.transformer_decoder.layers.3.norms.0.weight:weight_decay=0.0
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- panoptic_head.transformer_decoder.layers.3.norms.0.bias:weight_decay=0.0
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- panoptic_head.transformer_decoder.layers.3.norms.1.weight:weight_decay=0.0
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- panoptic_head.transformer_decoder.layers.3.norms.1.bias:weight_decay=0.0
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- panoptic_head.transformer_decoder.layers.3.norms.2.weight:weight_decay=0.0
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- panoptic_head.transformer_decoder.layers.3.norms.2.bias:weight_decay=0.0
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- panoptic_head.transformer_decoder.layers.4.norms.0.weight:weight_decay=0.0
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- panoptic_head.transformer_decoder.layers.4.norms.0.bias:weight_decay=0.0
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- panoptic_head.transformer_decoder.layers.4.norms.1.weight:weight_decay=0.0
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- panoptic_head.transformer_decoder.layers.4.norms.1.bias:weight_decay=0.0
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- panoptic_head.transformer_decoder.layers.4.norms.2.weight:weight_decay=0.0
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- panoptic_head.transformer_decoder.layers.4.norms.2.bias:weight_decay=0.0
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- panoptic_head.transformer_decoder.layers.5.norms.0.weight:weight_decay=0.0
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- panoptic_head.transformer_decoder.layers.5.norms.0.bias:weight_decay=0.0
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- panoptic_head.transformer_decoder.layers.5.norms.1.weight:weight_decay=0.0
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- panoptic_head.transformer_decoder.layers.5.norms.1.bias:weight_decay=0.0
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- panoptic_head.transformer_decoder.layers.5.norms.2.weight:weight_decay=0.0
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- panoptic_head.transformer_decoder.layers.5.norms.2.bias:weight_decay=0.0
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- panoptic_head.transformer_decoder.layers.6.norms.0.weight:weight_decay=0.0
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- panoptic_head.transformer_decoder.layers.6.norms.0.bias:weight_decay=0.0
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- panoptic_head.transformer_decoder.layers.6.norms.1.weight:weight_decay=0.0
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- panoptic_head.transformer_decoder.layers.6.norms.1.bias:weight_decay=0.0
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- panoptic_head.transformer_decoder.layers.6.norms.2.weight:weight_decay=0.0
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- panoptic_head.transformer_decoder.layers.6.norms.2.bias:weight_decay=0.0
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- panoptic_head.transformer_decoder.layers.7.norms.0.weight:weight_decay=0.0
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- panoptic_head.transformer_decoder.layers.7.norms.0.bias:weight_decay=0.0
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- panoptic_head.transformer_decoder.layers.7.norms.1.weight:weight_decay=0.0
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- panoptic_head.transformer_decoder.layers.7.norms.1.bias:weight_decay=0.0
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- panoptic_head.transformer_decoder.layers.7.norms.2.weight:weight_decay=0.0
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- panoptic_head.transformer_decoder.layers.7.norms.2.bias:weight_decay=0.0
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- panoptic_head.transformer_decoder.layers.8.norms.0.weight:weight_decay=0.0
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- panoptic_head.transformer_decoder.layers.8.norms.0.bias:weight_decay=0.0
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- panoptic_head.transformer_decoder.layers.8.norms.1.weight:weight_decay=0.0
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- panoptic_head.transformer_decoder.layers.8.norms.1.bias:weight_decay=0.0
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- panoptic_head.transformer_decoder.layers.8.norms.2.weight:weight_decay=0.0
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- panoptic_head.transformer_decoder.layers.8.norms.2.bias:weight_decay=0.0
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- panoptic_head.transformer_decoder.post_norm.weight:weight_decay=0.0
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- panoptic_head.transformer_decoder.post_norm.bias:weight_decay=0.0
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- panoptic_head.query_embed.weight:lr=1e-05
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- panoptic_head.query_embed.weight:weight_decay=0.0
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- panoptic_head.query_embed.weight:lr_mult=1.0
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- panoptic_head.query_embed.weight:decay_mult=0.0
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- panoptic_head.query_feat.weight:lr=1e-05
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- panoptic_head.query_feat.weight:weight_decay=0.0
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- panoptic_head.query_feat.weight:lr_mult=1.0
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- panoptic_head.query_feat.weight:decay_mult=0.0
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- panoptic_head.level_embed.weight:lr=1e-05
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- panoptic_head.level_embed.weight:weight_decay=0.0
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- panoptic_head.level_embed.weight:lr_mult=1.0
2025/06/25 18:25:15 - mmengine - INFO - paramwise_options -- panoptic_head.level_embed.weight:decay_mult=0.0
2025/06/25 18:25:15 - mmengine - INFO - LR is set based on batch size of 4 and the current batch size is 4. Scaling the original LR by 1.0.
2025/06/25 18:25:18 - mmengine - INFO - load model from: torchvision://resnet50
2025/06/25 18:25:18 - mmengine - INFO - Loads checkpoint by torchvision backend from path: torchvision://resnet50
2025/06/25 18:25:18 - mmengine - WARNING - The model and loaded state dict do not match exactly

unexpected key in source state_dict: fc.weight, fc.bias

Name of parameter - Initialization information

backbone.conv1.weight - torch.Size([64, 3, 7, 7]): 
PretrainedInit: load from torchvision://resnet50 

backbone.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.conv1.weight - torch.Size([64, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.downsample.0.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.downsample.1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.downsample.1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.conv1.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.downsample.1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.downsample.1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.conv1.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.downsample.0.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.downsample.1.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.downsample.1.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.downsample.0.weight - torch.Size([2048, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.downsample.1.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.downsample.1.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

panoptic_head.pixel_decoder.input_convs.0.conv.weight - torch.Size([256, 2048, 1, 1]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

panoptic_head.pixel_decoder.input_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.pixel_decoder.input_convs.0.gn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.pixel_decoder.input_convs.0.gn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.pixel_decoder.input_convs.1.conv.weight - torch.Size([256, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

panoptic_head.pixel_decoder.input_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.pixel_decoder.input_convs.1.gn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.pixel_decoder.input_convs.1.gn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.pixel_decoder.input_convs.2.conv.weight - torch.Size([256, 512, 1, 1]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

panoptic_head.pixel_decoder.input_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.pixel_decoder.input_convs.2.gn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.pixel_decoder.input_convs.2.gn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.pixel_decoder.encoder.layers.0.self_attn.sampling_offsets.weight - torch.Size([192, 256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.pixel_decoder.encoder.layers.0.self_attn.sampling_offsets.bias - torch.Size([192]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

panoptic_head.pixel_decoder.encoder.layers.0.self_attn.attention_weights.weight - torch.Size([96, 256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.pixel_decoder.encoder.layers.0.self_attn.attention_weights.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.pixel_decoder.encoder.layers.0.self_attn.value_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

panoptic_head.pixel_decoder.encoder.layers.0.self_attn.value_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.pixel_decoder.encoder.layers.0.self_attn.output_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

panoptic_head.pixel_decoder.encoder.layers.0.self_attn.output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.pixel_decoder.encoder.layers.0.ffn.layers.0.0.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

panoptic_head.pixel_decoder.encoder.layers.0.ffn.layers.0.0.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.pixel_decoder.encoder.layers.0.ffn.layers.1.weight - torch.Size([256, 1024]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

panoptic_head.pixel_decoder.encoder.layers.0.ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.pixel_decoder.encoder.layers.0.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.pixel_decoder.encoder.layers.0.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.pixel_decoder.encoder.layers.0.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.pixel_decoder.encoder.layers.0.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.pixel_decoder.encoder.layers.1.self_attn.sampling_offsets.weight - torch.Size([192, 256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.pixel_decoder.encoder.layers.1.self_attn.sampling_offsets.bias - torch.Size([192]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

panoptic_head.pixel_decoder.encoder.layers.1.self_attn.attention_weights.weight - torch.Size([96, 256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.pixel_decoder.encoder.layers.1.self_attn.attention_weights.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.pixel_decoder.encoder.layers.1.self_attn.value_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

panoptic_head.pixel_decoder.encoder.layers.1.self_attn.value_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.pixel_decoder.encoder.layers.1.self_attn.output_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

panoptic_head.pixel_decoder.encoder.layers.1.self_attn.output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.pixel_decoder.encoder.layers.1.ffn.layers.0.0.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

panoptic_head.pixel_decoder.encoder.layers.1.ffn.layers.0.0.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.pixel_decoder.encoder.layers.1.ffn.layers.1.weight - torch.Size([256, 1024]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

panoptic_head.pixel_decoder.encoder.layers.1.ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.pixel_decoder.encoder.layers.1.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.pixel_decoder.encoder.layers.1.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.pixel_decoder.encoder.layers.1.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.pixel_decoder.encoder.layers.1.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.pixel_decoder.encoder.layers.2.self_attn.sampling_offsets.weight - torch.Size([192, 256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.pixel_decoder.encoder.layers.2.self_attn.sampling_offsets.bias - torch.Size([192]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

panoptic_head.pixel_decoder.encoder.layers.2.self_attn.attention_weights.weight - torch.Size([96, 256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.pixel_decoder.encoder.layers.2.self_attn.attention_weights.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.pixel_decoder.encoder.layers.2.self_attn.value_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

panoptic_head.pixel_decoder.encoder.layers.2.self_attn.value_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.pixel_decoder.encoder.layers.2.self_attn.output_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

panoptic_head.pixel_decoder.encoder.layers.2.self_attn.output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.pixel_decoder.encoder.layers.2.ffn.layers.0.0.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

panoptic_head.pixel_decoder.encoder.layers.2.ffn.layers.0.0.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.pixel_decoder.encoder.layers.2.ffn.layers.1.weight - torch.Size([256, 1024]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

panoptic_head.pixel_decoder.encoder.layers.2.ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.pixel_decoder.encoder.layers.2.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.pixel_decoder.encoder.layers.2.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.pixel_decoder.encoder.layers.2.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.pixel_decoder.encoder.layers.2.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.pixel_decoder.encoder.layers.3.self_attn.sampling_offsets.weight - torch.Size([192, 256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.pixel_decoder.encoder.layers.3.self_attn.sampling_offsets.bias - torch.Size([192]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

panoptic_head.pixel_decoder.encoder.layers.3.self_attn.attention_weights.weight - torch.Size([96, 256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.pixel_decoder.encoder.layers.3.self_attn.attention_weights.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.pixel_decoder.encoder.layers.3.self_attn.value_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

panoptic_head.pixel_decoder.encoder.layers.3.self_attn.value_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.pixel_decoder.encoder.layers.3.self_attn.output_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

panoptic_head.pixel_decoder.encoder.layers.3.self_attn.output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.pixel_decoder.encoder.layers.3.ffn.layers.0.0.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

panoptic_head.pixel_decoder.encoder.layers.3.ffn.layers.0.0.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.pixel_decoder.encoder.layers.3.ffn.layers.1.weight - torch.Size([256, 1024]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

panoptic_head.pixel_decoder.encoder.layers.3.ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.pixel_decoder.encoder.layers.3.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.pixel_decoder.encoder.layers.3.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.pixel_decoder.encoder.layers.3.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.pixel_decoder.encoder.layers.3.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.pixel_decoder.encoder.layers.4.self_attn.sampling_offsets.weight - torch.Size([192, 256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.pixel_decoder.encoder.layers.4.self_attn.sampling_offsets.bias - torch.Size([192]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

panoptic_head.pixel_decoder.encoder.layers.4.self_attn.attention_weights.weight - torch.Size([96, 256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.pixel_decoder.encoder.layers.4.self_attn.attention_weights.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.pixel_decoder.encoder.layers.4.self_attn.value_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

panoptic_head.pixel_decoder.encoder.layers.4.self_attn.value_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.pixel_decoder.encoder.layers.4.self_attn.output_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

panoptic_head.pixel_decoder.encoder.layers.4.self_attn.output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.pixel_decoder.encoder.layers.4.ffn.layers.0.0.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

panoptic_head.pixel_decoder.encoder.layers.4.ffn.layers.0.0.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.pixel_decoder.encoder.layers.4.ffn.layers.1.weight - torch.Size([256, 1024]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

panoptic_head.pixel_decoder.encoder.layers.4.ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.pixel_decoder.encoder.layers.4.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.pixel_decoder.encoder.layers.4.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.pixel_decoder.encoder.layers.4.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.pixel_decoder.encoder.layers.4.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.pixel_decoder.encoder.layers.5.self_attn.sampling_offsets.weight - torch.Size([192, 256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.pixel_decoder.encoder.layers.5.self_attn.sampling_offsets.bias - torch.Size([192]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

panoptic_head.pixel_decoder.encoder.layers.5.self_attn.attention_weights.weight - torch.Size([96, 256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.pixel_decoder.encoder.layers.5.self_attn.attention_weights.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.pixel_decoder.encoder.layers.5.self_attn.value_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

panoptic_head.pixel_decoder.encoder.layers.5.self_attn.value_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.pixel_decoder.encoder.layers.5.self_attn.output_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

panoptic_head.pixel_decoder.encoder.layers.5.self_attn.output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.pixel_decoder.encoder.layers.5.ffn.layers.0.0.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

panoptic_head.pixel_decoder.encoder.layers.5.ffn.layers.0.0.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.pixel_decoder.encoder.layers.5.ffn.layers.1.weight - torch.Size([256, 1024]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

panoptic_head.pixel_decoder.encoder.layers.5.ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.pixel_decoder.encoder.layers.5.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.pixel_decoder.encoder.layers.5.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.pixel_decoder.encoder.layers.5.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.pixel_decoder.encoder.layers.5.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.pixel_decoder.level_encoding.weight - torch.Size([3, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

panoptic_head.pixel_decoder.lateral_convs.0.conv.weight - torch.Size([256, 256, 1, 1]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

panoptic_head.pixel_decoder.lateral_convs.0.gn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.pixel_decoder.lateral_convs.0.gn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.pixel_decoder.output_convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

panoptic_head.pixel_decoder.output_convs.0.gn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.pixel_decoder.output_convs.0.gn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.pixel_decoder.mask_feature.weight - torch.Size([256, 256, 1, 1]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

panoptic_head.pixel_decoder.mask_feature.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

panoptic_head.transformer_decoder.layers.0.self_attn.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

panoptic_head.transformer_decoder.layers.0.self_attn.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.transformer_decoder.layers.0.self_attn.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

panoptic_head.transformer_decoder.layers.0.self_attn.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.transformer_decoder.layers.0.cross_attn.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

panoptic_head.transformer_decoder.layers.0.cross_attn.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.transformer_decoder.layers.0.cross_attn.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

panoptic_head.transformer_decoder.layers.0.cross_attn.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.transformer_decoder.layers.0.ffn.layers.0.0.weight - torch.Size([2048, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

panoptic_head.transformer_decoder.layers.0.ffn.layers.0.0.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.transformer_decoder.layers.0.ffn.layers.1.weight - torch.Size([256, 2048]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

panoptic_head.transformer_decoder.layers.0.ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.transformer_decoder.layers.0.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.transformer_decoder.layers.0.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.transformer_decoder.layers.0.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.transformer_decoder.layers.0.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.transformer_decoder.layers.0.norms.2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.transformer_decoder.layers.0.norms.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.transformer_decoder.layers.1.self_attn.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

panoptic_head.transformer_decoder.layers.1.self_attn.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.transformer_decoder.layers.1.self_attn.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

panoptic_head.transformer_decoder.layers.1.self_attn.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.transformer_decoder.layers.1.cross_attn.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

panoptic_head.transformer_decoder.layers.1.cross_attn.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.transformer_decoder.layers.1.cross_attn.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

panoptic_head.transformer_decoder.layers.1.cross_attn.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.transformer_decoder.layers.1.ffn.layers.0.0.weight - torch.Size([2048, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

panoptic_head.transformer_decoder.layers.1.ffn.layers.0.0.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.transformer_decoder.layers.1.ffn.layers.1.weight - torch.Size([256, 2048]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

panoptic_head.transformer_decoder.layers.1.ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.transformer_decoder.layers.1.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.transformer_decoder.layers.1.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.transformer_decoder.layers.1.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.transformer_decoder.layers.1.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.transformer_decoder.layers.1.norms.2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.transformer_decoder.layers.1.norms.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.transformer_decoder.layers.2.self_attn.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

panoptic_head.transformer_decoder.layers.2.self_attn.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.transformer_decoder.layers.2.self_attn.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

panoptic_head.transformer_decoder.layers.2.self_attn.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.transformer_decoder.layers.2.cross_attn.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

panoptic_head.transformer_decoder.layers.2.cross_attn.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.transformer_decoder.layers.2.cross_attn.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

panoptic_head.transformer_decoder.layers.2.cross_attn.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.transformer_decoder.layers.2.ffn.layers.0.0.weight - torch.Size([2048, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

panoptic_head.transformer_decoder.layers.2.ffn.layers.0.0.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.transformer_decoder.layers.2.ffn.layers.1.weight - torch.Size([256, 2048]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

panoptic_head.transformer_decoder.layers.2.ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.transformer_decoder.layers.2.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.transformer_decoder.layers.2.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.transformer_decoder.layers.2.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.transformer_decoder.layers.2.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.transformer_decoder.layers.2.norms.2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.transformer_decoder.layers.2.norms.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.transformer_decoder.layers.3.self_attn.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

panoptic_head.transformer_decoder.layers.3.self_attn.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.transformer_decoder.layers.3.self_attn.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

panoptic_head.transformer_decoder.layers.3.self_attn.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.transformer_decoder.layers.3.cross_attn.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

panoptic_head.transformer_decoder.layers.3.cross_attn.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.transformer_decoder.layers.3.cross_attn.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

panoptic_head.transformer_decoder.layers.3.cross_attn.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.transformer_decoder.layers.3.ffn.layers.0.0.weight - torch.Size([2048, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

panoptic_head.transformer_decoder.layers.3.ffn.layers.0.0.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.transformer_decoder.layers.3.ffn.layers.1.weight - torch.Size([256, 2048]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

panoptic_head.transformer_decoder.layers.3.ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.transformer_decoder.layers.3.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.transformer_decoder.layers.3.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.transformer_decoder.layers.3.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.transformer_decoder.layers.3.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.transformer_decoder.layers.3.norms.2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.transformer_decoder.layers.3.norms.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.transformer_decoder.layers.4.self_attn.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

panoptic_head.transformer_decoder.layers.4.self_attn.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.transformer_decoder.layers.4.self_attn.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

panoptic_head.transformer_decoder.layers.4.self_attn.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.transformer_decoder.layers.4.cross_attn.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

panoptic_head.transformer_decoder.layers.4.cross_attn.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.transformer_decoder.layers.4.cross_attn.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

panoptic_head.transformer_decoder.layers.4.cross_attn.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.transformer_decoder.layers.4.ffn.layers.0.0.weight - torch.Size([2048, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

panoptic_head.transformer_decoder.layers.4.ffn.layers.0.0.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.transformer_decoder.layers.4.ffn.layers.1.weight - torch.Size([256, 2048]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

panoptic_head.transformer_decoder.layers.4.ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.transformer_decoder.layers.4.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.transformer_decoder.layers.4.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.transformer_decoder.layers.4.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.transformer_decoder.layers.4.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.transformer_decoder.layers.4.norms.2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.transformer_decoder.layers.4.norms.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.transformer_decoder.layers.5.self_attn.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

panoptic_head.transformer_decoder.layers.5.self_attn.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.transformer_decoder.layers.5.self_attn.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

panoptic_head.transformer_decoder.layers.5.self_attn.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.transformer_decoder.layers.5.cross_attn.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

panoptic_head.transformer_decoder.layers.5.cross_attn.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.transformer_decoder.layers.5.cross_attn.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

panoptic_head.transformer_decoder.layers.5.cross_attn.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.transformer_decoder.layers.5.ffn.layers.0.0.weight - torch.Size([2048, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

panoptic_head.transformer_decoder.layers.5.ffn.layers.0.0.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.transformer_decoder.layers.5.ffn.layers.1.weight - torch.Size([256, 2048]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

panoptic_head.transformer_decoder.layers.5.ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.transformer_decoder.layers.5.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.transformer_decoder.layers.5.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.transformer_decoder.layers.5.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.transformer_decoder.layers.5.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.transformer_decoder.layers.5.norms.2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.transformer_decoder.layers.5.norms.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.transformer_decoder.layers.6.self_attn.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

panoptic_head.transformer_decoder.layers.6.self_attn.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.transformer_decoder.layers.6.self_attn.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

panoptic_head.transformer_decoder.layers.6.self_attn.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.transformer_decoder.layers.6.cross_attn.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

panoptic_head.transformer_decoder.layers.6.cross_attn.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.transformer_decoder.layers.6.cross_attn.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

panoptic_head.transformer_decoder.layers.6.cross_attn.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.transformer_decoder.layers.6.ffn.layers.0.0.weight - torch.Size([2048, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

panoptic_head.transformer_decoder.layers.6.ffn.layers.0.0.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.transformer_decoder.layers.6.ffn.layers.1.weight - torch.Size([256, 2048]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

panoptic_head.transformer_decoder.layers.6.ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.transformer_decoder.layers.6.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.transformer_decoder.layers.6.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.transformer_decoder.layers.6.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.transformer_decoder.layers.6.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.transformer_decoder.layers.6.norms.2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.transformer_decoder.layers.6.norms.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.transformer_decoder.layers.7.self_attn.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

panoptic_head.transformer_decoder.layers.7.self_attn.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.transformer_decoder.layers.7.self_attn.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

panoptic_head.transformer_decoder.layers.7.self_attn.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.transformer_decoder.layers.7.cross_attn.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

panoptic_head.transformer_decoder.layers.7.cross_attn.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.transformer_decoder.layers.7.cross_attn.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

panoptic_head.transformer_decoder.layers.7.cross_attn.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.transformer_decoder.layers.7.ffn.layers.0.0.weight - torch.Size([2048, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

panoptic_head.transformer_decoder.layers.7.ffn.layers.0.0.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.transformer_decoder.layers.7.ffn.layers.1.weight - torch.Size([256, 2048]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

panoptic_head.transformer_decoder.layers.7.ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.transformer_decoder.layers.7.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.transformer_decoder.layers.7.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.transformer_decoder.layers.7.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.transformer_decoder.layers.7.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.transformer_decoder.layers.7.norms.2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.transformer_decoder.layers.7.norms.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.transformer_decoder.layers.8.self_attn.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

panoptic_head.transformer_decoder.layers.8.self_attn.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.transformer_decoder.layers.8.self_attn.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

panoptic_head.transformer_decoder.layers.8.self_attn.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.transformer_decoder.layers.8.cross_attn.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

panoptic_head.transformer_decoder.layers.8.cross_attn.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.transformer_decoder.layers.8.cross_attn.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

panoptic_head.transformer_decoder.layers.8.cross_attn.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.transformer_decoder.layers.8.ffn.layers.0.0.weight - torch.Size([2048, 256]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

panoptic_head.transformer_decoder.layers.8.ffn.layers.0.0.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.transformer_decoder.layers.8.ffn.layers.1.weight - torch.Size([256, 2048]): 
Initialized by user-defined `init_weights` in Mask2FormerHead  

panoptic_head.transformer_decoder.layers.8.ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.transformer_decoder.layers.8.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.transformer_decoder.layers.8.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.transformer_decoder.layers.8.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.transformer_decoder.layers.8.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.transformer_decoder.layers.8.norms.2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.transformer_decoder.layers.8.norms.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.transformer_decoder.post_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.transformer_decoder.post_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.query_embed.weight - torch.Size([300, 256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.query_feat.weight - torch.Size([300, 256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.level_embed.weight - torch.Size([3, 256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.cls_embed.weight - torch.Size([2, 256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.cls_embed.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.mask_embed.0.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.mask_embed.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.mask_embed.2.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.mask_embed.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.mask_embed.4.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of Mask2Former  

panoptic_head.mask_embed.4.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Mask2Former  
2025/06/25 18:25:44 - mmengine - INFO - Load checkpoint from checkpoints/mask2former_r50_pretrained_50e_whu-mix-vector.pth
2025/06/25 18:25:44 - mmengine - WARNING - "FileClient" will be deprecated in future. Please use io functions in https://mmengine.readthedocs.io/en/latest/api/fileio.html#file-io
2025/06/25 18:25:44 - mmengine - WARNING - "HardDiskBackend" is the alias of "LocalBackend" and the former will be deprecated in future.
2025/06/25 18:25:44 - mmengine - INFO - Checkpoints will be saved to D:\Sagi\GCP\GCP\work_dir\mask2former_training\mask2former_e1_lre-5_kostanai_afs_quicktest.
2025/06/25 18:26:07 - mmengine - INFO - Epoch(train)  [1][ 10/471]  base_lr: 1.0000e-07 lr: 1.0000e-09  eta: 3:02:35  time: 2.3309  data_time: 0.8490  memory: 5821  grad_norm: 81.8702  loss: 1.3513  loss_cls: 0.3540  loss_mask: 0.1273  loss_dice: 0.8700
2025/06/25 18:26:27 - mmengine - INFO - Epoch(train)  [1][ 20/471]  base_lr: 2.0000e-07 lr: 2.0000e-09  eta: 2:50:46  time: 2.0386  data_time: 0.0057  memory: 5862  grad_norm: 130.4082  loss: 1.5336  loss_cls: 0.3957  loss_mask: 0.1273  loss_dice: 1.0106
2025/06/25 18:26:51 - mmengine - INFO - Epoch(train)  [1][ 30/471]  base_lr: 3.0000e-07 lr: 3.0000e-09  eta: 2:54:52  time: 2.3566  data_time: 0.0061  memory: 6538  grad_norm: 33.5909  loss: 1.5755  loss_cls: 0.4313  loss_mask: 0.1193  loss_dice: 1.0249
2025/06/25 18:27:10 - mmengine - INFO - Epoch(train)  [1][ 40/471]  base_lr: 4.0000e-07 lr: 4.0000e-09  eta: 2:47:35  time: 1.8870  data_time: 0.0066  memory: 6546  grad_norm: 29.2644  loss: 1.5827  loss_cls: 0.4252  loss_mask: 0.1092  loss_dice: 1.0484
2025/06/25 18:27:28 - mmengine - INFO - Epoch(train)  [1][ 50/471]  base_lr: 5.0000e-07 lr: 5.0000e-09  eta: 2:42:32  time: 1.8505  data_time: 0.0053  memory: 5790  grad_norm: 54.6093  loss: 1.3421  loss_cls: 0.3299  loss_mask: 0.0962  loss_dice: 0.9161
2025/06/25 18:27:48 - mmengine - INFO - Epoch(train)  [1][ 60/471]  base_lr: 6.0000e-07 lr: 6.0000e-09  eta: 2:40:29  time: 1.9612  data_time: 0.0043  memory: 6266  grad_norm: 41.8526  loss: 1.5668  loss_cls: 0.4288  loss_mask: 0.0977  loss_dice: 1.0403
2025/06/25 18:28:07 - mmengine - INFO - Epoch(train)  [1][ 70/471]  base_lr: 7.0000e-07 lr: 7.0000e-09  eta: 2:38:40  time: 1.9386  data_time: 0.0052  memory: 5794  grad_norm: 21.7013  loss: 1.2817  loss_cls: 0.3051  loss_mask: 0.0861  loss_dice: 0.8905
2025/06/25 18:28:27 - mmengine - INFO - Epoch(train)  [1][ 80/471]  base_lr: 8.0000e-07 lr: 8.0000e-09  eta: 2:37:03  time: 1.9193  data_time: 0.0064  memory: 6149  grad_norm: 23.9890  loss: 1.3226  loss_cls: 0.3653  loss_mask: 0.0840  loss_dice: 0.8733
2025/06/25 18:28:46 - mmengine - INFO - Epoch(train)  [1][ 90/471]  base_lr: 9.0000e-07 lr: 9.0000e-09  eta: 2:36:15  time: 1.9809  data_time: 0.0031  memory: 6054  grad_norm: 59.7087  loss: 1.6298  loss_cls: 0.4773  loss_mask: 0.0999  loss_dice: 1.0527
2025/06/25 18:29:06 - mmengine - INFO - Epoch(train)  [1][100/471]  base_lr: 1.0000e-06 lr: 1.0000e-08  eta: 2:35:26  time: 1.9682  data_time: 0.0052  memory: 5869  grad_norm: 91.8651  loss: 1.5854  loss_cls: 0.4562  loss_mask: 0.1825  loss_dice: 0.9467
2025/06/25 18:29:26 - mmengine - INFO - Epoch(train)  [1][110/471]  base_lr: 1.1000e-06 lr: 1.1000e-08  eta: 2:34:42  time: 1.9667  data_time: 0.0048  memory: 6318  grad_norm: 104.2991  loss: 1.4780  loss_cls: 0.3278  loss_mask: 0.1141  loss_dice: 1.0361
2025/06/25 18:29:44 - mmengine - INFO - Epoch(train)  [1][120/471]  base_lr: 1.2000e-06 lr: 1.2000e-08  eta: 2:33:05  time: 1.8162  data_time: 0.0046  memory: 6354  grad_norm: 129.4518  loss: 1.3188  loss_cls: 0.3634  loss_mask: 0.1029  loss_dice: 0.8524
2025/06/25 18:30:02 - mmengine - INFO - Epoch(train)  [1][130/471]  base_lr: 1.3000e-06 lr: 1.3000e-08  eta: 2:31:49  time: 1.8432  data_time: 0.0050  memory: 6010  grad_norm: 144.8249  loss: 1.4540  loss_cls: 0.3808  loss_mask: 0.1029  loss_dice: 0.9704
2025/06/25 18:30:21 - mmengine - INFO - Epoch(train)  [1][140/471]  base_lr: 1.4000e-06 lr: 1.4000e-08  eta: 2:30:57  time: 1.8891  data_time: 0.0035  memory: 6450  grad_norm: 29.1077  loss: 1.4853  loss_cls: 0.3675  loss_mask: 0.1186  loss_dice: 0.9992
2025/06/25 18:30:39 - mmengine - INFO - Epoch(train)  [1][150/471]  base_lr: 1.5000e-06 lr: 1.5000e-08  eta: 2:29:43  time: 1.8042  data_time: 0.0048  memory: 5781  grad_norm: 38.5618  loss: 1.3183  loss_cls: 0.2919  loss_mask: 0.1012  loss_dice: 0.9252
2025/06/25 18:30:57 - mmengine - INFO - Epoch(train)  [1][160/471]  base_lr: 1.6000e-06 lr: 1.6000e-08  eta: 2:28:42  time: 1.8258  data_time: 0.0031  memory: 6060  grad_norm: 43.2937  loss: 1.4619  loss_cls: 0.3775  loss_mask: 0.0863  loss_dice: 0.9981
2025/06/25 18:31:16 - mmengine - INFO - Epoch(train)  [1][170/471]  base_lr: 1.7000e-06 lr: 1.7000e-08  eta: 2:27:45  time: 1.8188  data_time: 0.0062  memory: 6215  grad_norm: 150.0514  loss: 1.3342  loss_cls: 0.2731  loss_mask: 0.1286  loss_dice: 0.9325
2025/06/25 18:31:34 - mmengine - INFO - Epoch(train)  [1][180/471]  base_lr: 1.8000e-06 lr: 1.8000e-08  eta: 2:26:52  time: 1.8203  data_time: 0.0036  memory: 6142  grad_norm: 25.0064  loss: 1.4700  loss_cls: 0.3566  loss_mask: 0.1232  loss_dice: 0.9901
2025/06/25 18:31:52 - mmengine - INFO - Epoch(train)  [1][190/471]  base_lr: 1.9000e-06 lr: 1.9000e-08  eta: 2:26:01  time: 1.8136  data_time: 0.0042  memory: 6347  grad_norm: 49.6397  loss: 1.4533  loss_cls: 0.2887  loss_mask: 0.1368  loss_dice: 1.0278
2025/06/25 18:32:10 - mmengine - INFO - Epoch(train)  [1][200/471]  base_lr: 2.0000e-06 lr: 2.0000e-08  eta: 2:25:19  time: 1.8377  data_time: 0.0058  memory: 5687  grad_norm: 24.3099  loss: 1.3671  loss_cls: 0.3162  loss_mask: 0.1177  loss_dice: 0.9331
2025/06/25 18:32:29 - mmengine - INFO - Epoch(train)  [1][210/471]  base_lr: 2.1000e-06 lr: 2.1000e-08  eta: 2:24:35  time: 1.8188  data_time: 0.0052  memory: 5943  grad_norm: 40.2883  loss: 1.3344  loss_cls: 0.2757  loss_mask: 0.0974  loss_dice: 0.9613
2025/06/25 18:32:47 - mmengine - INFO - Epoch(train)  [1][220/471]  base_lr: 2.2000e-06 lr: 2.2000e-08  eta: 2:24:04  time: 1.8713  data_time: 0.0039  memory: 6458  grad_norm: 283.3654  loss: 1.2604  loss_cls: 0.2755  loss_mask: 0.1025  loss_dice: 0.8824
2025/06/25 18:33:06 - mmengine - INFO - Epoch(train)  [1][230/471]  base_lr: 2.3000e-06 lr: 2.3000e-08  eta: 2:23:26  time: 1.8284  data_time: 0.0043  memory: 6207  grad_norm: 29.6568  loss: 1.3164  loss_cls: 0.2874  loss_mask: 0.0889  loss_dice: 0.9401
2025/06/25 18:33:24 - mmengine - INFO - Epoch(train)  [1][240/471]  base_lr: 2.4000e-06 lr: 2.4000e-08  eta: 2:22:43  time: 1.7949  data_time: 0.0024  memory: 5960  grad_norm: 130.2915  loss: 1.3250  loss_cls: 0.2861  loss_mask: 0.1064  loss_dice: 0.9325
2025/06/25 18:33:43 - mmengine - INFO - Epoch(train)  [1][250/471]  base_lr: 2.5000e-06 lr: 2.5000e-08  eta: 2:22:35  time: 1.9748  data_time: 0.0034  memory: 5980  grad_norm: 21.1564  loss: 1.4020  loss_cls: 0.3426  loss_mask: 0.1058  loss_dice: 0.9536
2025/06/25 18:34:04 - mmengine - INFO - Epoch(train)  [1][260/471]  base_lr: 2.6000e-06 lr: 2.6000e-08  eta: 2:22:44  time: 2.0824  data_time: 0.0074  memory: 5855  grad_norm: 15.7266  loss: 1.4508  loss_cls: 0.3523  loss_mask: 0.0879  loss_dice: 1.0106
2025/06/25 18:34:24 - mmengine - INFO - Epoch(train)  [1][270/471]  base_lr: 2.7000e-06 lr: 2.7000e-08  eta: 2:22:34  time: 1.9814  data_time: 0.0044  memory: 5878  grad_norm: 42.1042  loss: 1.2955  loss_cls: 0.2575  loss_mask: 0.1130  loss_dice: 0.9250
2025/06/25 18:34:44 - mmengine - INFO - Epoch(train)  [1][280/471]  base_lr: 2.8000e-06 lr: 2.8000e-08  eta: 2:22:30  time: 2.0234  data_time: 0.0032  memory: 6472  grad_norm: 31.2061  loss: 1.2649  loss_cls: 0.2480  loss_mask: 0.0776  loss_dice: 0.9393
2025/06/25 18:35:03 - mmengine - INFO - Epoch(train)  [1][290/471]  base_lr: 2.9000e-06 lr: 2.9000e-08  eta: 2:21:58  time: 1.8487  data_time: 0.0052  memory: 6185  grad_norm: 26.8426  loss: 1.3955  loss_cls: 0.3342  loss_mask: 0.0981  loss_dice: 0.9632
2025/06/25 18:35:21 - mmengine - INFO - Epoch(train)  [1][300/471]  base_lr: 3.0000e-06 lr: 3.0000e-08  eta: 2:21:30  time: 1.8654  data_time: 0.0038  memory: 6055  grad_norm: 109.8528  loss: 1.3568  loss_cls: 0.2858  loss_mask: 0.0897  loss_dice: 0.9813
2025/06/25 18:35:40 - mmengine - INFO - Epoch(train)  [1][310/471]  base_lr: 3.1000e-06 lr: 3.1000e-08  eta: 2:20:57  time: 1.8267  data_time: 0.0058  memory: 5833  grad_norm: 21.6670  loss: 1.1860  loss_cls: 0.2132  loss_mask: 0.1200  loss_dice: 0.8528
2025/06/25 18:35:59 - mmengine - INFO - Epoch(train)  [1][320/471]  base_lr: 3.2000e-06 lr: 3.2000e-08  eta: 2:20:36  time: 1.9148  data_time: 0.0047  memory: 6222  grad_norm: 102.9727  loss: 1.4313  loss_cls: 0.3372  loss_mask: 0.0814  loss_dice: 1.0127
2025/06/25 18:36:18 - mmengine - INFO - Epoch(train)  [1][330/471]  base_lr: 3.3000e-06 lr: 3.3000e-08  eta: 2:20:17  time: 1.9222  data_time: 0.0040  memory: 6113  grad_norm: 30.1743  loss: 1.3512  loss_cls: 0.3107  loss_mask: 0.0803  loss_dice: 0.9603
2025/06/25 18:36:37 - mmengine - INFO - Epoch(train)  [1][340/471]  base_lr: 3.4000e-06 lr: 3.4000e-08  eta: 2:19:54  time: 1.8894  data_time: 0.0065  memory: 5864  grad_norm: 63.4956  loss: 1.3707  loss_cls: 0.3153  loss_mask: 0.0810  loss_dice: 0.9744
2025/06/25 18:36:56 - mmengine - INFO - Epoch(train)  [1][350/471]  base_lr: 3.5000e-06 lr: 3.5000e-08  eta: 2:19:36  time: 1.9288  data_time: 0.0044  memory: 5788  grad_norm: 41.1887  loss: 1.3864  loss_cls: 0.2450  loss_mask: 0.1502  loss_dice: 0.9912
2025/06/25 18:37:15 - mmengine - INFO - Epoch(train)  [1][360/471]  base_lr: 3.6000e-06 lr: 3.6000e-08  eta: 2:19:16  time: 1.9150  data_time: 0.0057  memory: 6289  grad_norm: 20.5112  loss: 1.5116  loss_cls: 0.3183  loss_mask: 0.0953  loss_dice: 1.0980
2025/06/25 18:37:36 - mmengine - INFO - Epoch(train)  [1][370/471]  base_lr: 3.7000e-06 lr: 3.7000e-08  eta: 2:19:19  time: 2.1146  data_time: 0.0034  memory: 6185  grad_norm: 38.9230  loss: 1.4005  loss_cls: 0.2954  loss_mask: 0.1158  loss_dice: 0.9894
2025/06/25 18:37:57 - mmengine - INFO - Epoch(train)  [1][380/471]  base_lr: 3.8000e-06 lr: 3.8000e-08  eta: 2:19:13  time: 2.0437  data_time: 0.0039  memory: 6185  grad_norm: 42.5299  loss: 1.3192  loss_cls: 0.2701  loss_mask: 0.1088  loss_dice: 0.9403
2025/06/25 18:38:17 - mmengine - INFO - Epoch(train)  [1][390/471]  base_lr: 3.9000e-06 lr: 3.9000e-08  eta: 2:19:07  time: 2.0454  data_time: 0.0047  memory: 5842  grad_norm: 29.4313  loss: 1.2898  loss_cls: 0.2373  loss_mask: 0.1047  loss_dice: 0.9478
2025/06/25 18:38:35 - mmengine - INFO - Epoch(train)  [1][400/471]  base_lr: 4.0000e-06 lr: 4.0000e-08  eta: 2:18:34  time: 1.8077  data_time: 0.0014  memory: 5913  grad_norm: 28.4509  loss: 1.1617  loss_cls: 0.2312  loss_mask: 0.1015  loss_dice: 0.8290
2025/06/25 18:38:55 - mmengine - INFO - Epoch(train)  [1][410/471]  base_lr: 4.1000e-06 lr: 4.1000e-08  eta: 2:18:14  time: 1.9175  data_time: 0.0062  memory: 5900  grad_norm: 28.4334  loss: 1.4685  loss_cls: 0.3553  loss_mask: 0.0953  loss_dice: 1.0179
2025/06/25 18:39:14 - mmengine - INFO - Epoch(train)  [1][420/471]  base_lr: 4.2000e-06 lr: 4.2000e-08  eta: 2:17:55  time: 1.9335  data_time: 0.0060  memory: 6281  grad_norm: 70.6318  loss: 1.4208  loss_cls: 0.2796  loss_mask: 0.1320  loss_dice: 1.0092
2025/06/25 18:39:33 - mmengine - INFO - Epoch(train)  [1][430/471]  base_lr: 4.3000e-06 lr: 4.3000e-08  eta: 2:17:37  time: 1.9425  data_time: 0.0048  memory: 6340  grad_norm: 28.2668  loss: 1.3719  loss_cls: 0.2995  loss_mask: 0.1087  loss_dice: 0.9637
2025/06/25 18:39:52 - mmengine - INFO - Epoch(train)  [1][440/471]  base_lr: 4.4000e-06 lr: 4.4000e-08  eta: 2:17:13  time: 1.8797  data_time: 0.0042  memory: 6414  grad_norm: 35.2760  loss: 1.5391  loss_cls: 0.3454  loss_mask: 0.0984  loss_dice: 1.0953
2025/06/25 18:40:11 - mmengine - INFO - Epoch(train)  [1][450/471]  base_lr: 4.5000e-06 lr: 4.5000e-08  eta: 2:16:50  time: 1.8872  data_time: 0.0059  memory: 5779  grad_norm: 24.0066  loss: 1.2262  loss_cls: 0.2567  loss_mask: 0.1230  loss_dice: 0.8465
2025/06/25 18:40:29 - mmengine - INFO - Epoch(train)  [1][460/471]  base_lr: 4.6000e-06 lr: 4.6000e-08  eta: 2:16:23  time: 1.8485  data_time: 0.0061  memory: 6075  grad_norm: 19.7548  loss: 1.2047  loss_cls: 0.2531  loss_mask: 0.0891  loss_dice: 0.8625
2025/06/25 18:40:48 - mmengine - INFO - Epoch(train)  [1][470/471]  base_lr: 4.7000e-06 lr: 4.7000e-08  eta: 2:15:55  time: 1.8297  data_time: 0.0037  memory: 5950  grad_norm: 33.0399  loss: 1.2003  loss_cls: 0.2639  loss_mask: 0.0996  loss_dice: 0.8367
2025/06/25 18:40:50 - mmengine - INFO - Exp name: mask2former_r50_kazgisa-kostanai_20250625_182430
2025/06/25 18:40:50 - mmengine - INFO - Saving checkpoint at 1 epochs
2025/06/25 18:41:15 - mmengine - INFO - Epoch(val)  [1][10/53]    eta: 0:01:09  time: 1.6163  data_time: 0.7973  memory: 5267  
2025/06/25 18:41:24 - mmengine - INFO - Epoch(val)  [1][20/53]    eta: 0:00:41  time: 0.9092  data_time: 0.1411  memory: 2334  
2025/06/25 18:41:33 - mmengine - INFO - Epoch(val)  [1][30/53]    eta: 0:00:26  time: 0.8906  data_time: 0.0844  memory: 2334  
2025/06/25 18:41:42 - mmengine - INFO - Epoch(val)  [1][40/53]    eta: 0:00:14  time: 0.9282  data_time: 0.1156  memory: 2334  
2025/06/25 18:41:50 - mmengine - INFO - Epoch(val)  [1][50/53]    eta: 0:00:03  time: 0.8600  data_time: 0.1016  memory: 2334  
2025/06/25 18:41:54 - mmengine - INFO - Evaluating segm...
2025/06/25 18:41:58 - mmengine - INFO - segm_mAP_copypaste: 0.502 0.745 0.551 0.278 0.659 0.802
2025/06/25 18:41:58 - mmengine - INFO - Epoch(val) [1][53/53]    coco/segm_mAP: 0.5020  coco/segm_mAP_50: 0.7450  coco/segm_mAP_75: 0.5510  coco/segm_mAP_s: 0.2780  coco/segm_mAP_m: 0.6590  coco/segm_mAP_l: 0.8020  data_time: 0.2470  time: 1.0301
2025/06/25 18:42:25 - mmengine - INFO - Epoch(train)  [2][ 10/471]  base_lr: 4.8100e-06 lr: 4.8100e-08  eta: 2:16:39  time: 2.6692  data_time: 0.7996  memory: 6200  grad_norm: 27.3726  loss: 1.2439  loss_cls: 0.2497  loss_mask: 0.0971  loss_dice: 0.8971
2025/06/25 18:42:43 - mmengine - INFO - Epoch(train)  [2][ 20/471]  base_lr: 4.9100e-06 lr: 4.9100e-08  eta: 2:16:09  time: 1.8142  data_time: 0.0049  memory: 5731  grad_norm: 16.7920  loss: 1.3246  loss_cls: 0.2766  loss_mask: 0.0996  loss_dice: 0.9484
2025/06/25 18:43:01 - mmengine - INFO - Epoch(train)  [2][ 30/471]  base_lr: 5.0100e-06 lr: 5.0100e-08  eta: 2:15:40  time: 1.8238  data_time: 0.0033  memory: 5980  grad_norm: 40.6673  loss: 1.2392  loss_cls: 0.2385  loss_mask: 0.1166  loss_dice: 0.8840
2025/06/25 18:43:20 - mmengine - INFO - Epoch(train)  [2][ 40/471]  base_lr: 5.1100e-06 lr: 5.1100e-08  eta: 2:15:13  time: 1.8477  data_time: 0.0038  memory: 5958  grad_norm: 57.7588  loss: 1.2908  loss_cls: 0.3020  loss_mask: 0.0934  loss_dice: 0.8954
2025/06/25 18:43:38 - mmengine - INFO - Epoch(train)  [2][ 50/471]  base_lr: 5.2100e-06 lr: 5.2100e-08  eta: 2:14:45  time: 1.8192  data_time: 0.0042  memory: 6142  grad_norm: 54.7169  loss: 1.4292  loss_cls: 0.3173  loss_mask: 0.1045  loss_dice: 1.0074
2025/06/25 18:43:56 - mmengine - INFO - Epoch(train)  [2][ 60/471]  base_lr: 5.3100e-06 lr: 5.3100e-08  eta: 2:14:18  time: 1.8288  data_time: 0.0039  memory: 5847  grad_norm: 32.3694  loss: 1.3187  loss_cls: 0.2473  loss_mask: 0.0920  loss_dice: 0.9794
2025/06/25 18:44:15 - mmengine - INFO - Epoch(train)  [2][ 70/471]  base_lr: 5.4100e-06 lr: 5.4100e-08  eta: 2:13:50  time: 1.8205  data_time: 0.0044  memory: 5987  grad_norm: 56.0533  loss: 1.2790  loss_cls: 0.2435  loss_mask: 0.1035  loss_dice: 0.9321
2025/06/25 18:44:34 - mmengine - INFO - Epoch(train)  [2][ 80/471]  base_lr: 5.5100e-06 lr: 5.5100e-08  eta: 2:13:30  time: 1.9130  data_time: 0.0043  memory: 6281  grad_norm: 51.3624  loss: 1.2894  loss_cls: 0.2808  loss_mask: 0.0815  loss_dice: 0.9271
2025/06/25 18:44:52 - mmengine - INFO - Epoch(train)  [2][ 90/471]  base_lr: 5.6100e-06 lr: 5.6100e-08  eta: 2:13:05  time: 1.8559  data_time: 0.0043  memory: 5981  grad_norm: 31.8845  loss: 1.1937  loss_cls: 0.2658  loss_mask: 0.0754  loss_dice: 0.8525
2025/06/25 18:45:12 - mmengine - INFO - Epoch(train)  [2][100/471]  base_lr: 5.7100e-06 lr: 5.7100e-08  eta: 2:12:48  time: 1.9562  data_time: 0.0049  memory: 6076  grad_norm: 23.5863  loss: 1.2794  loss_cls: 0.2969  loss_mask: 0.0959  loss_dice: 0.8866
2025/06/25 18:45:31 - mmengine - INFO - Epoch(train)  [2][110/471]  base_lr: 5.8100e-06 lr: 5.8100e-08  eta: 2:12:29  time: 1.9222  data_time: 0.0037  memory: 5597  grad_norm: 27.3797  loss: 1.3914  loss_cls: 0.2722  loss_mask: 0.0781  loss_dice: 1.0410
2025/06/25 18:45:50 - mmengine - INFO - Epoch(train)  [2][120/471]  base_lr: 5.9100e-06 lr: 5.9100e-08  eta: 2:12:10  time: 1.9306  data_time: 0.0057  memory: 5884  grad_norm: 20.0128  loss: 1.1955  loss_cls: 0.2585  loss_mask: 0.1525  loss_dice: 0.7845
2025/06/25 18:46:09 - mmengine - INFO - Epoch(train)  [2][130/471]  base_lr: 6.0100e-06 lr: 6.0100e-08  eta: 2:11:50  time: 1.9126  data_time: 0.0058  memory: 6193  grad_norm: 53.5387  loss: 1.3954  loss_cls: 0.2436  loss_mask: 0.1069  loss_dice: 1.0449
2025/06/25 18:46:29 - mmengine - INFO - Epoch(train)  [2][140/471]  base_lr: 6.1100e-06 lr: 6.1100e-08  eta: 2:11:32  time: 1.9401  data_time: 0.0037  memory: 5753  grad_norm: 102.0075  loss: 1.1621  loss_cls: 0.2194  loss_mask: 0.0807  loss_dice: 0.8620
2025/06/25 18:46:47 - mmengine - INFO - Epoch(train)  [2][150/471]  base_lr: 6.2100e-06 lr: 6.2100e-08  eta: 2:11:06  time: 1.8304  data_time: 0.0056  memory: 6244  grad_norm: 25.0485  loss: 1.4171  loss_cls: 0.2693  loss_mask: 0.1092  loss_dice: 1.0386
2025/06/25 18:47:06 - mmengine - INFO - Epoch(train)  [2][160/471]  base_lr: 6.3100e-06 lr: 6.3100e-08  eta: 2:10:44  time: 1.8781  data_time: 0.0049  memory: 6076  grad_norm: 17.9408  loss: 1.3203  loss_cls: 0.2542  loss_mask: 0.0808  loss_dice: 0.9853
2025/06/25 18:47:24 - mmengine - INFO - Epoch(train)  [2][170/471]  base_lr: 6.4100e-06 lr: 6.4100e-08  eta: 2:10:17  time: 1.8070  data_time: 0.0074  memory: 5746  grad_norm: 110.5789  loss: 1.1692  loss_cls: 0.2432  loss_mask: 0.0990  loss_dice: 0.8270
2025/06/25 18:47:42 - mmengine - INFO - Epoch(train)  [2][180/471]  base_lr: 6.5100e-06 lr: 6.5100e-08  eta: 2:09:52  time: 1.8156  data_time: 0.0016  memory: 6215  grad_norm: 28.1081  loss: 1.2857  loss_cls: 0.2940  loss_mask: 0.0886  loss_dice: 0.9030
2025/06/25 18:48:01 - mmengine - INFO - Epoch(train)  [2][190/471]  base_lr: 6.6100e-06 lr: 6.6100e-08  eta: 2:09:28  time: 1.8467  data_time: 0.0053  memory: 6215  grad_norm: 19.5668  loss: 1.2722  loss_cls: 0.2539  loss_mask: 0.1122  loss_dice: 0.9060
2025/06/25 18:48:19 - mmengine - INFO - Epoch(train)  [2][200/471]  base_lr: 6.7100e-06 lr: 6.7100e-08  eta: 2:09:04  time: 1.8337  data_time: 0.0070  memory: 6406  grad_norm: 31.4629  loss: 1.1891  loss_cls: 0.2423  loss_mask: 0.0973  loss_dice: 0.8495
2025/06/25 18:48:37 - mmengine - INFO - Epoch(train)  [2][210/471]  base_lr: 6.8100e-06 lr: 6.8100e-08  eta: 2:08:39  time: 1.8292  data_time: 0.0029  memory: 5980  grad_norm: 145.3577  loss: 1.3603  loss_cls: 0.2881  loss_mask: 0.1162  loss_dice: 0.9560
2025/06/25 18:48:56 - mmengine - INFO - Epoch(train)  [2][220/471]  base_lr: 6.9100e-06 lr: 6.9100e-08  eta: 2:08:18  time: 1.8861  data_time: 0.0052  memory: 6032  grad_norm: 51.7755  loss: 1.1373  loss_cls: 0.2171  loss_mask: 0.0713  loss_dice: 0.8488
2025/06/25 18:49:16 - mmengine - INFO - Epoch(train)  [2][230/471]  base_lr: 7.0100e-06 lr: 7.0100e-08  eta: 2:08:02  time: 1.9687  data_time: 0.0053  memory: 6612  grad_norm: 21.0260  loss: 1.1303  loss_cls: 0.2596  loss_mask: 0.0813  loss_dice: 0.7894
2025/06/25 18:49:34 - mmengine - INFO - Epoch(train)  [2][240/471]  base_lr: 7.1100e-06 lr: 7.1100e-08  eta: 2:07:40  time: 1.8549  data_time: 0.0032  memory: 6539  grad_norm: 19.2697  loss: 1.2978  loss_cls: 0.2649  loss_mask: 0.1143  loss_dice: 0.9186
2025/06/25 18:49:53 - mmengine - INFO - Epoch(train)  [2][250/471]  base_lr: 7.2100e-06 lr: 7.2100e-08  eta: 2:07:17  time: 1.8468  data_time: 0.0032  memory: 6261  grad_norm: 24.1852  loss: 1.4533  loss_cls: 0.3446  loss_mask: 0.0950  loss_dice: 1.0137
2025/06/25 18:50:11 - mmengine - INFO - Epoch(train)  [2][260/471]  base_lr: 7.3100e-06 lr: 7.3100e-08  eta: 2:06:52  time: 1.8221  data_time: 0.0045  memory: 5855  grad_norm: 37.8022  loss: 1.3551  loss_cls: 0.2852  loss_mask: 0.0876  loss_dice: 0.9823
2025/06/25 18:50:29 - mmengine - INFO - Epoch(train)  [2][270/471]  base_lr: 7.4100e-06 lr: 7.4100e-08  eta: 2:06:29  time: 1.8268  data_time: 0.0049  memory: 5995  grad_norm: 125.9287  loss: 1.3005  loss_cls: 0.2870  loss_mask: 0.0848  loss_dice: 0.9288
2025/06/25 18:50:48 - mmengine - INFO - Epoch(train)  [2][280/471]  base_lr: 7.5100e-06 lr: 7.5100e-08  eta: 2:06:05  time: 1.8256  data_time: 0.0059  memory: 6127  grad_norm: 38.8804  loss: 1.1728  loss_cls: 0.2587  loss_mask: 0.0788  loss_dice: 0.8353
2025/06/25 18:51:06 - mmengine - INFO - Epoch(train)  [2][290/471]  base_lr: 7.6100e-06 lr: 7.6100e-08  eta: 2:05:41  time: 1.8246  data_time: 0.0035  memory: 6341  grad_norm: 33.3487  loss: 1.2231  loss_cls: 0.2390  loss_mask: 0.0993  loss_dice: 0.8848
2025/06/25 18:51:25 - mmengine - INFO - Epoch(train)  [2][300/471]  base_lr: 7.7100e-06 lr: 7.7100e-08  eta: 2:05:21  time: 1.8840  data_time: 0.0041  memory: 6347  grad_norm: 31.8943  loss: 1.4076  loss_cls: 0.3122  loss_mask: 0.1375  loss_dice: 0.9580
2025/06/25 18:51:43 - mmengine - INFO - Epoch(train)  [2][310/471]  base_lr: 7.8100e-06 lr: 7.8100e-08  eta: 2:05:00  time: 1.8681  data_time: 0.0038  memory: 5877  grad_norm: 40.9421  loss: 1.2062  loss_cls: 0.2688  loss_mask: 0.0985  loss_dice: 0.8388
2025/06/25 18:52:02 - mmengine - INFO - Epoch(train)  [2][320/471]  base_lr: 7.9100e-06 lr: 7.9100e-08  eta: 2:04:38  time: 1.8506  data_time: 0.0046  memory: 6053  grad_norm: 29.9605  loss: 1.3367  loss_cls: 0.2973  loss_mask: 0.0917  loss_dice: 0.9478
2025/06/25 18:52:20 - mmengine - INFO - Epoch(train)  [2][330/471]  base_lr: 8.0100e-06 lr: 8.0100e-08  eta: 2:04:14  time: 1.8180  data_time: 0.0048  memory: 6031  grad_norm: 21.5325  loss: 1.2137  loss_cls: 0.2466  loss_mask: 0.0905  loss_dice: 0.8766
2025/06/25 18:52:40 - mmengine - INFO - Epoch(train)  [2][340/471]  base_lr: 8.1100e-06 lr: 8.1100e-08  eta: 2:03:58  time: 1.9706  data_time: 0.0051  memory: 6186  grad_norm: 119.7373  loss: 1.2141  loss_cls: 0.2825  loss_mask: 0.0766  loss_dice: 0.8550
2025/06/25 18:53:00 - mmengine - INFO - Epoch(train)  [2][350/471]  base_lr: 8.2100e-06 lr: 8.2100e-08  eta: 2:03:44  time: 2.0069  data_time: 0.0044  memory: 5796  grad_norm: 50.5171  loss: 1.2063  loss_cls: 0.2745  loss_mask: 0.0931  loss_dice: 0.8387
2025/06/25 18:53:19 - mmengine - INFO - Epoch(train)  [2][360/471]  base_lr: 8.3100e-06 lr: 8.3100e-08  eta: 2:03:27  time: 1.9539  data_time: 0.0076  memory: 5906  grad_norm: 19.9902  loss: 1.2557  loss_cls: 0.2856  loss_mask: 0.0938  loss_dice: 0.8763
2025/06/25 18:53:38 - mmengine - INFO - Epoch(train)  [2][370/471]  base_lr: 8.4100e-06 lr: 8.4100e-08  eta: 2:03:08  time: 1.9153  data_time: 0.0057  memory: 6502  grad_norm: 18.4483  loss: 1.1548  loss_cls: 0.2678  loss_mask: 0.0763  loss_dice: 0.8107
2025/06/25 18:53:57 - mmengine - INFO - Epoch(train)  [2][380/471]  base_lr: 8.5100e-06 lr: 8.5100e-08  eta: 2:02:45  time: 1.8270  data_time: 0.0077  memory: 6090  grad_norm: 108.3060  loss: 1.2026  loss_cls: 0.2765  loss_mask: 0.0901  loss_dice: 0.8359
2025/06/25 18:54:15 - mmengine - INFO - Epoch(train)  [2][390/471]  base_lr: 8.6100e-06 lr: 8.6100e-08  eta: 2:02:22  time: 1.8243  data_time: 0.0041  memory: 5965  grad_norm: 14.3966  loss: 1.2428  loss_cls: 0.2719  loss_mask: 0.0977  loss_dice: 0.8733
2025/06/25 18:54:34 - mmengine - INFO - Epoch(train)  [2][400/471]  base_lr: 8.7100e-06 lr: 8.7100e-08  eta: 2:02:01  time: 1.8555  data_time: 0.0045  memory: 6244  grad_norm: 68.7166  loss: 1.2480  loss_cls: 0.2753  loss_mask: 0.1065  loss_dice: 0.8662
2025/06/25 18:54:51 - mmengine - INFO - Epoch(train)  [2][410/471]  base_lr: 8.8100e-06 lr: 8.8100e-08  eta: 2:01:37  time: 1.7946  data_time: 0.0044  memory: 5737  grad_norm: 35.0586  loss: 1.0964  loss_cls: 0.2396  loss_mask: 0.0688  loss_dice: 0.7881
2025/06/25 18:55:10 - mmengine - INFO - Epoch(train)  [2][420/471]  base_lr: 8.9100e-06 lr: 8.9100e-08  eta: 2:01:18  time: 1.9004  data_time: 0.0050  memory: 6436  grad_norm: 53.2196  loss: 1.3378  loss_cls: 0.2724  loss_mask: 0.1145  loss_dice: 0.9509
2025/06/25 18:55:30 - mmengine - INFO - Epoch(train)  [2][430/471]  base_lr: 9.0100e-06 lr: 9.0100e-08  eta: 2:01:02  time: 1.9959  data_time: 0.0019  memory: 6406  grad_norm: 17.2156  loss: 1.2433  loss_cls: 0.2985  loss_mask: 0.0759  loss_dice: 0.8689
2025/06/25 18:55:50 - mmengine - INFO - Epoch(train)  [2][440/471]  base_lr: 9.1100e-06 lr: 9.1100e-08  eta: 2:00:46  time: 1.9684  data_time: 0.0057  memory: 6164  grad_norm: 17.5045  loss: 1.2803  loss_cls: 0.2625  loss_mask: 0.0981  loss_dice: 0.9198
2025/06/25 18:56:09 - mmengine - INFO - Epoch(train)  [2][450/471]  base_lr: 9.2100e-06 lr: 9.2100e-08  eta: 2:00:25  time: 1.8644  data_time: 0.0056  memory: 6031  grad_norm: 18.4162  loss: 1.1094  loss_cls: 0.2482  loss_mask: 0.0909  loss_dice: 0.7702
2025/06/25 18:56:27 - mmengine - INFO - Epoch(train)  [2][460/471]  base_lr: 9.3100e-06 lr: 9.3100e-08  eta: 2:00:04  time: 1.8552  data_time: 0.0047  memory: 6135  grad_norm: 55.8524  loss: 1.1437  loss_cls: 0.2539  loss_mask: 0.0887  loss_dice: 0.8011
2025/06/25 18:56:47 - mmengine - INFO - Epoch(train)  [2][470/471]  base_lr: 9.4100e-06 lr: 9.4100e-08  eta: 1:59:48  time: 1.9907  data_time: 0.0048  memory: 6075  grad_norm: 22.3442  loss: 1.3203  loss_cls: 0.3104  loss_mask: 0.1016  loss_dice: 0.9083
2025/06/25 18:56:49 - mmengine - INFO - Exp name: mask2former_r50_kazgisa-kostanai_20250625_182430
2025/06/25 18:56:50 - mmengine - INFO - Saving checkpoint at 2 epochs
2025/06/25 18:57:16 - mmengine - INFO - Epoch(val)  [2][10/53]    eta: 0:01:16  time: 1.7823  data_time: 0.9477  memory: 5247  
2025/06/25 18:57:25 - mmengine - INFO - Epoch(val)  [2][20/53]    eta: 0:00:44  time: 0.9208  data_time: 0.0799  memory: 2334  
2025/06/25 18:57:34 - mmengine - INFO - Epoch(val)  [2][30/53]    eta: 0:00:27  time: 0.8856  data_time: 0.0646  memory: 2334  
2025/06/25 18:57:44 - mmengine - INFO - Epoch(val)  [2][40/53]    eta: 0:00:14  time: 0.9187  data_time: 0.0984  memory: 2334  
2025/06/25 18:57:53 - mmengine - INFO - Epoch(val)  [2][50/53]    eta: 0:00:03  time: 0.9057  data_time: 0.1438  memory: 2334  
2025/06/25 18:57:56 - mmengine - INFO - Evaluating segm...
2025/06/25 18:58:00 - mmengine - INFO - segm_mAP_copypaste: 0.509 0.753 0.562 0.290 0.660 0.806
2025/06/25 18:58:00 - mmengine - INFO - Epoch(val) [2][53/53]    coco/segm_mAP: 0.5090  coco/segm_mAP_50: 0.7530  coco/segm_mAP_75: 0.5620  coco/segm_mAP_s: 0.2900  coco/segm_mAP_m: 0.6600  coco/segm_mAP_l: 0.8060  data_time: 0.2472  time: 1.0425
2025/06/25 18:58:27 - mmengine - INFO - Epoch(train)  [3][ 10/471]  base_lr: 9.5200e-06 lr: 9.5200e-08  eta: 1:59:58  time: 2.6655  data_time: 0.7944  memory: 5812  grad_norm: 25.0907  loss: 1.2668  loss_cls: 0.2684  loss_mask: 0.1089  loss_dice: 0.8895
2025/06/25 18:58:46 - mmengine - INFO - Epoch(train)  [3][ 20/471]  base_lr: 9.6200e-06 lr: 9.6200e-08  eta: 1:59:37  time: 1.8892  data_time: 0.0058  memory: 6341  grad_norm: 41.2749  loss: 1.2518  loss_cls: 0.3064  loss_mask: 0.0845  loss_dice: 0.8610
2025/06/25 18:59:04 - mmengine - INFO - Epoch(train)  [3][ 30/471]  base_lr: 9.7200e-06 lr: 9.7200e-08  eta: 1:59:15  time: 1.8226  data_time: 0.0052  memory: 6054  grad_norm: 29.3259  loss: 1.1410  loss_cls: 0.2710  loss_mask: 0.0917  loss_dice: 0.7783
2025/06/25 18:59:23 - mmengine - INFO - Epoch(train)  [3][ 40/471]  base_lr: 9.8200e-06 lr: 9.8200e-08  eta: 1:58:53  time: 1.8510  data_time: 0.0049  memory: 6200  grad_norm: 17.9742  loss: 1.2443  loss_cls: 0.2830  loss_mask: 0.0837  loss_dice: 0.8776
2025/06/25 18:59:42 - mmengine - INFO - Epoch(train)  [3][ 50/471]  base_lr: 9.9200e-06 lr: 9.9200e-08  eta: 1:58:34  time: 1.9055  data_time: 0.0042  memory: 5958  grad_norm: 14.4904  loss: 1.0941  loss_cls: 0.2088  loss_mask: 0.0810  loss_dice: 0.8042
2025/06/25 18:59:57 - mmengine - INFO - Exp name: mask2former_r50_kazgisa-kostanai_20250625_182430
2025/06/25 19:00:01 - mmengine - INFO - Epoch(train)  [3][ 60/471]  base_lr: 1.0000e-05 lr: 1.0000e-07  eta: 1:58:15  time: 1.9238  data_time: 0.0043  memory: 5580  grad_norm: 18.8664  loss: 1.0089  loss_cls: 0.1975  loss_mask: 0.1029  loss_dice: 0.7085
